ST. CLOUD STATE UNIVERSITY
THEREPOSITORY AT ST. CLOUD STATE
CULMINATING PROJECTS IN COMPUTER SCIENCE AND
INFORMATION TECHNOLOGY
DEPARTMENT OF COMPUTER SCIENCE AND INFORMATION
TECHNOLOGY
3-2016
A COMPARATIVE ANALYSIS OF NODE.JS (SERVER-SIDE
JAVASCRIPT)
NIMESH CHHETRI
SAINT CLOUD STATE UNIVERSITY, CHNI1201@STCLOUDSTATE.EDU
FOLLOW THIS AND ADDITIONAL WORKS AT: HTTPS://REPOSITORY.STCLOUDSTATE.EDU/CSIT_ETDS
THIS STARRED PAPER IS BROUGHT TO YOU FOR FREE AND OPEN ACCESS BY THE DEPARTMENT OF COMPUTER SCIENCE AND INFORMATION TECHNOLOGY AT THEREPOSITORY AT
ST. CLOUD STATE. IT HAS BEEN ACCEPTED FOR INCLUSION IN CULMINATING PROJECTS IN COMPUTER SCIENCE AND INFORMATION TECHNOLOGY BY AN AUTHORIZED
ADMINISTRATOR OF THEREPOSITORY AT ST. CLOUD STATE. FOR MORE INFORMATION, PLEASE CONTACT RSWEXELBAUM@STCLOUDSTATE.EDU.
RECOMMENDED CITATION
CHHETRI, NIMESH, "A COMPARATIVE ANALYSIS OF NODE.JS (SERVER-SIDE JAVASCRIPT)" (2016). CULMINATING PROJECTS IN COMPUTER SCIENCE AND
INFORMATION TECHNOLOGY. 5.
HTTPS://REPOSITORY.STCLOUDSTATE.EDU/CSIT_ETDS/5
VIEW METADATA, CITATION AND SIMILAR PAPERS AT CORE.AC.UK BROUGHT TO YOU BY CORE
PROVIDED BY ST. CLOUD STATE UNIVERSITY
A COMPARATIVE ANALYSIS OF NODE.JS (SERVER-SIDE JAVASCRIPT)
BY
NIMESH CHHETRI
A STARRED PAPER
SUBMITTED TO THE GRADUATE FACULTY
OF
ST. CLOUD STATE UNIVERSITY
IN PARTIAL FULFILLMENT OF THE REQUIREMENTS
FOR THE DEGREE
MASTER OF SCIENCE IN COMPUTER SCIENCE
ST. CLOUD, MINNESOTA
FEBRUARY, 2016
STARRED PAPER COMMITTEE:
ANDREW A. ANDA, CHAIRPERSON
BRYANT A. JULSTROM
DENNIS GUSTER
ACKNOWLEDGEMENTS
I WOULD LIKE TO THANK MY COMMITTEE MEMBERS, PROFESSOR ANDREW A. ANDA, PROFESSOR
BRYANT A. JULSTROM, AND PROFESSOR DENNIS GUSTER FOR THEIR CONTINUOUS SUPPORT, FEEDBACK AND
GUIDANCE. MY SPECIAL THANK GOES TO PROFESSOR DENNIS GUSTER AND MARTIN SMITH FOR PROVIDING THE
TEST ENVIRONMENT IN BCRL (BUSINESS COMPUTING RESEARCH LABORATORY) WITHOUT WHICH ONE OF THE
IMPORTANT SECTION OF THIS PAPER WOULD NOT HAVE BEEN POSSIBLE. ALSO, I WOULD LIKE TO THANK THE
COMPUTER SCIENCE DEPARTMENT FACULTY AT ST. CLOUD STATE UNIVERSITY FOR PROVIDING ME HIGH-TECH
EDUCATION AND TECHNICAL SKILLS REQUIRED TO WRITE TECHNICAL PAPER LIKE THIS. SPECIAL THANKS ALSO GO TO
MY FAMILY FOR SUPPORTING ME AND ENCOURAGING ME TO DO THE BEST.
I
ABSTRACT
NODE.JS (ALSO TERMED NODE) IS A PLATFORM BUILT ON GOOGLE CHROME V8 JAVASCRIPT RUNTIME
ENGINE FOR EASILY BUILDING FAST, SCALABLE, AND LIGHTWEIGHT APPLICATIONS.V8 AND NODE ARE MOSTLY
IMPLEMENTED IN C AND C++ FOCUSING ON PERFORMANCE AND LOW MEMORY CONSUMPTION. IN THIS
PAPER, WE PROVIDE AN OVERVIEW OF NODE BY COMPARING IT TO A CONVENTIONAL SERVER-SIDE SCRIPTING
PROGRAMMING LANGUAGE, PHP. INITIALLY, WE FOCUS ON NODE’S MODULARITY, ITS IN-BUILT PACKAGE
MANAGER LABELED NODE PACKAGE MANAGER AND NODE’S WORKING ARCHITECTURE. THE MAIN FEATURE OF
NODE IS ITS USE OF NON-BLOCKING EVENT-DRIVEN I/O WITH AN ASYNCHRONOUS PROGRAMMING MODEL TO
REMAIN LIGHTWEIGHT AND EFFICIENT IN HANDLING CONCURRENCY. THESE COMPRISE THE UNDERLYING
FEATURES OF NODE WHICH WE DISCUSS IN DETAIL. NODE DIFFERS FROM JAVASCRIPT WHICH WE DESCRIBE BY
EMPHASIZING SOME MAJOR DEFICIENCIES IN JAVASCRIPT THAT NODE REMEDIATES. LIKEWISE, BY
INTRODUCING AJAX, AND ITS PROS AND CONS, WE SHOW HOW NODE SURPASSES AJAX IN REAL-TIME
APPLICATION DEVELOPMENT USABILITY. WITH NODE.JS, COMPLEX REAL-TIME APPLICATIONS CAN BE BUILT THAT
CAN SCALE TO MILLIONS OF CLIENT CONNECTIONS. WE ALSO DISCUSS FACTORS SUPPORTING CHOOSING NODE
AND WHY DEVELOPERS SHOULD USE IT. WE DESCRIBE SOME OF THE SECURITY HOLES IN NODE WITH SOLUTIONS
TO HANDLE THEM. IN ORDER TO CLARIFY WHERE NODE SUCCEEDS AND WHERE IT FAILS, WE PRESENT TWO
DIFFERENT BENCHMARKS COMPARING NODE WITH PHP. WE CONCLUDE BY HIGHLIGHTING SOME OF THE
LIMITATIONS OF NODE AND WE DISCUSS THE CURRENT DEVELOPMENTS IN PROCESS TO REMEDIATE NODE’S
DEFICIENCIES.
II
TABLE OF CONTENTS
PAGE
LIST OF TABLES .................................................................................................................................. V
LIST OF FIGURES................................................................................................................................ VI
CHAPTER
I. INTRODUCTION......................................................................................................................... 1
OBJECTIVES OF OUR STUDY ................................................................................................ 2
SIMPLE HTTP SERVER WITH NODE.JS ............................................................................... 3
NODE.JS MODULES........................................................................................................... 4
NPM: NODE PACKAGE MANAGER...................................................................................... 6
HOW NODE.JS WORKS? .................................................................................................... 7
NON-BLOCKING EVENT LOOP...................................................................................... 8
SINGLE-THREADED MODEL .......................................................................................... 9
ASYNCHRONOUS PROGRAMMING ................................................................................ 12
II. JAVASCRIPT VS. NODE.JS....................................................................................................... 16
MODULE SYSTEM ........................................................................................................... 16
GLOBAL OBJECT.............................................................................................................. 17
BUFFER.......................................................................................................................... 18
III. AJAX VS. NODE.JS ............................................................................................................. 19
AJAX .......................................................................................................................... 19
III
CHAPTER PAGE
AJAX POLLING.............................................................................................................. 23
AJAX LONG POLLING .................................................................................................... 23
REAL TIME APPLICATION DEVELOPMENT WITH SOCKET.IO ................................................. 24
IV. WHY NODE.JS?.................................................................................................................... 28
HIGH PERFORMANCE WEB-SERVERS................................................................................. 28
POPULARITY OF JAVASCRIPT.............................................................................................. 29
ONE LANGUAGE MULTIPLE FUNCTIONALITY........................................................................ 29
SIMPLE DEVELOPMENT ENVIRONMENT............................................................................. 29
GOOD REPUTATION ......................................................................................................... 30
V. NODE.JS SECURITY................................................................................................................ 31
CROSS SITE SCRIPTING (XSS).......................................................................................... 31
DENIAL OF SERVICE (DOS).............................................................................................. 34
REGULAR EXPRESSION DOS (REDOS).............................................................................. 36
FILE SYSTEM ACCESS..................................................................................................... 38
EXECUTION OF BINARY FILES ........................................................................................... 40
VI. BENCHMARKING NODE.JS...................................................................................................... 41
BENCHMARKING METHODOLOGY ...................................................................................... 41
TEST 1: FIBONACCI NUMBER CALCULATION ......................................................................... 44
TEST 2: READING LARGE TEXT FILE WITH CONCURRENT REQUESTS............................................. 45
IV
CHAPTER PAGE
BENCHMARKING RESULTS AND FINDINGS .......................................................................... 45
VII. LIMITATIONS OF NODE.JS ...................................................................................................... 55
POOR HANDLING OF HEAVY SERVER-SIDE COMPUTATION........................................................ 55
SERVER-SIDE APPLICATION WITH RELATIONAL DATABASE......................................................... 56
COMPLEXITY WITH CALLBACK FUNCTION............................................................................. 56
ECOSYSTEM IN DEVELOPMENT......................................................................................... 57
ADHERENCE TO JAVASCRIPT ............................................................................................. 57
VIII. LIMITATIONS AND RECOMMENDATIONS FOR FURTHER STUDY........................................................ 58
IX. CONCLUSION ........................................................................................................................ 60
REFERENCES..................................................................................................................................... 62
APPENDIX....................................................................................................................................... 65
V
LIST OF TABLES
 TABLE PAGE
1. TEST ENVIRONMENT SERVER CONFIGURATION........................................................................ 42
2. TEST 1: WINDOWS 7 ENVIRONMENT (APACHE-PHP)........................................................... 46
3. TEST 1: WINDOWS 7 ENVIRONMENT (NODE.JS) ................................................................... 47
4. TEST 1: UBUNTU ENVIRONMENT (APACHE-PHP)................................................................. 48
5. TEST 1: UBUNTU ENVIRONMENT (NODE.JS).......................................................................... 49
6. TEST 2: WINDOWS 7 ENVIRONMENT (APACHE-PHP)........................................................... 52
7. TEST 2: WINDOWS 7 ENVIRONMENT (NODE.JS) ................................................................... 52
8. TEST 2: UBUNTU ENVIRONMENT (APACHE-PHP)................................................................. 53
9. TEST 2: UBUNTU ENVIRONMENT (NODE.JS).......................................................................... 53
VI
LIST OF FIGURES
 FIGURE PAGE
1. SIMPLE HTTP SERVER IN NODE.JS ...................................................................................... 3
2. LOCAL NODE.JS MODULE EXPOSING FUNCTIONS....................................................................... 5
3. EXAMPLE OF BLOCKING PHP CODE EXAMPLE ...................................................................... 8
4. EXAMPLE OF NON-BLOCKING NODE.JS CODE ........................................................................ 9
5. EXAMPLE OF SINGLE-THREADED NODE MODEL .................................................................... 10
6. EXAMPLE OF MULTIPLE THREAD PER REQUESTS IN PHP ......................................................... 10
7. THREADED MODEL OF APACHE-PHP................................................................................... 11
8. SINGLE-THREADED MODEL OF NODE.JS................................................................................ 12
9. READING TEXT FILE USING PHP SYNCHRONOUSLY............................................................... 13
10. READING TEXT FILE USING INCORRECT NODE.JS ASYNCHRONOUSLY ........................................ 13
11. READING TEXT FILE USING NODE.JS ASYNCHRONOUSLY........................................................ 14
12. NODE.JS ARCHITECTURE ...................................................................................................... 15
13. CLASSIC VS. AJAX WEB APPLICATION MODEL ................................................................... 21
14. EXAMPLE OF AJAX CALL .................................................................................................. 22
15. AJAX POLLING................................................................................................................. 23
16. AJAX LONG POLLING ...................................................................................................... 24
17. EXAMPLE OF SOCKET.IO SERVER SIDE SCRIPT....................................................................... 26
18. EXAMPLE OF SOCKET.IO CLIENT SIDE .................................................................................. 26
19. BLOCK DIAGRAM OF SOCKET.IO........................................................................................... 27
VII
 FIGURE PAGE
20. EXAMPLE OF XSS IN CLIENT-SIDE JAVASCRIPT.................................................................... 32
21. EXAMPLE OF XSS IN SERVER-SIDE JAVASCRIPT................................................................... 33
22. USE OF STRICT MODE IN NODE.JS........................................................................................ 34
23. EXAMPLE OF TRY CATCH BLOCK ......................................................................................... 35
24. EXAMPLE OF VULNERABLE REGEX ...................................................................................... 36
25. ANALYSIS OF VULNERABLE REGEX....................................................................................... 37
26. CHECK FOR SAFE REGULAR EXPRESSION.................................................................................. 37
27. RECURSIVE FUNCTION TO CALCULATE FIBONACCI NUMBER........................................................ 44
28. TEST 1: CPU UTILIZATION WINDOWS7 ENVIRONMENT (APACHE-PHP)................................. 46
29. TEST 1: CPU UTILIZATION WINDOWS7 ENVIRONMENT (NODE.JS) ......................................... 47
30. TEST 1: CPU UTILIZATION UBUNTU ENVIRONMENT (APACHE-PHP) ...................................... 48
31. TEST 1: CPU UTILIZATION UBUNTU ENVIRONMENT (NODE.JS)............................................... 50
32. TEST 1: RESPONSE TIME GRAPH WITH HTTP REQUESTS & 200 CONCURRENT ....................... 50
33. TEST 1: CPU UTILIZATION RATIO WITH HTTP REQUESTS & 200 CONCURRENT (SINGLE THREAD)
........................................................................................................................................ 51
34. TEST 2: RESPONSE TIME GRAPH WITH HTTP REQUESTS & 200 CONCURRENT ....................... 54
1
CHAPTER 1: INTRODUCTION
NODE.JS (NODE) [1] IS A CROSS PLATFORM RUNTIME ENVIRONMENT ORIGINALLY DEVELOPED IN 2009
BY RYAN DAHL FOR DEVELOPING SERVER-SIDE APPLICATIONS. IT CAN BE REGARDED AS SERVER-SIDE
JAVASCRIPT. IT WAS CREATED TO ADDRESS THE ISSUES PLATFORMS CAN HAVE WITH THE PERFORMANCE IN
NETWORK COMMUNICATION TIME DEDICATING EXCESSIVE TIME PROCESSING WEB REQUESTS AND RESPONSES.
“NODE.JS IS A PLATFORM BUILT ON CHROME’S JAVASCRIPT RUNTIME FOR EASILY BUILDING FAST, SCALABLE
NETWORK APPLICATIONS. NODE.JS USES AN EVENT-DRIVEN, NON-BLOCKING I/O MODEL THAT MAKES IT
LIGHTWEIGHT AND EFFICIENT, PERFECT FOR DATA-INTENSIVE REAL-TIME APPLICATIONS THAT RUN ACROSS
DISTRIBUTED DEVICES [1].”
NODE HAS BECOME POPULAR AS IT MAKES CREATING HIGH PERFORMANCE, REAL-TIME WEB
APPLICATIONS EASY. NODE ALLOWS JAVASCRIPT TO BE USED END TO END, BOTH ON THE SERVER AND ON THE
CLIENT. JAVASCRIPT HAS ORIGINALLY RUN ONLY IN THE WEB BROWSER, BUT THE CONSIDERABLE DEMAND HAS
BROUGHT IT TO THE SERVER-SIDE. JAVASCRIPT HAS DEVELOPED VERY MUCH AND HAS EXCELED TO DOMINATE
SERVER-SIDE SCRIPTING. WE NEED TO ANALYZE THE SECURITY ISSUES IN NODE APPLICATIONS BECAUSE OF ITS
USE WITH JAVASCRIPT, WHICH HAS SECURITY LIABILITIES. NODE IS EVENT-BASED RATHER THAN THREAD-BASED.
NODE USES AN EVENT LOOP WITHIN A SINGLE THREAD INSTEAD OF MULTIPLE THREADS, AND IS ABLE TO SCALE TO
MILLIONS OF CONCURRENT CONNECTIONS. IN NODE, A SINGLE THREAD CAN ACCOMPLISH A HIGH CONCURRENCY.
EVERY I/O OPERATION IN NODE IS CARRIED OUT IN AN ASYNCHRONOUS FASHION, MEANING THAT THE SERVER
CAN CONTINUE TO PROCESS INCOMING REQUESTS WHILE THE I/O OPERATION IS TAKING PLACE [2]. BECAUSE
2
NODE IS ALSO ASYNCHRONOUS, AJAX (SEE CHAPTER 3) COULD BE MISTAKENLY CONSIDERED EQUIVALENT TO
NODE, THOUGH THEY ARE SIGNIFICANTLY DIFFERENT.
OBJECTIVES OF OUR STUDY
JAVASCRIPT WAS CREATED SHORTLY AFTER THE WORLD WIDE WEB (WWW) CAME INTO EXISTENCE.
JAVASCRIPT HAS PLAYED AN INTEGRAL ROLE IN ADDING INTERACTION TO THE USER INTERFACE OF WEB
APPLICATIONS AND WEBSITES UNTIL THE RECENT RELEASE OF HTML5 (HYPER TEXT MARKUP LANGUAGE) AND
MODERN JAVASCRIPT FRAMEWORKS. JAVASCRIPT IS ALSO AN INTEGRAL PART OF AJAX WHICH WAS
INTRODUCED IN LATE 1990’S WITH THE ADVENT OF WEB 2.0 TO ADD REAL-TIME LIKE INTERACTIVITY IN THE
WEBPAGES. DESPITE ALL OF THIS PROGRESS, JAVASCRIPT HAS BEEN CONSIDERED AS THE SCRIPTING LANGUAGE
FOR CLIENT-SIDE PROGRAMMING (THAT RUNS ONLY FROM THE BROWSER). HOWEVER, THIS APPROACH HAS
CHANGED WITH THE DEVELOPMENT OF SERVER-SIDE JAVASCRIPT (AMONG WHICH NODE IS CONSIDERED
PROMINENT). NODE HAS NOT JUST STRENGTHENED SERVER-SIDE JAVASCRIPT, BUT ALSO HAS BEEN COMPETITIVE
WITH OTHER POPULAR SERVER-SIDE SCRIPTING LANGUAGES WITH RESPECT TO PERFORMANCE AND SCALABILITY. IN
THIS PAPER, WE WILL DESCRIBE THE ADVANTAGEOUS FEATURES OF NODE. THE UNDERLYING FEATURES OF NODE:
SINGLE-THREADED, EVENT-DRIVEN I/0, AND ASYNCHRONOUS PROGRAMMING ARE DISCUSSED WITH SUFFICIENT
EXAMPLES TO GIVE BETTER INSIGHT INTO THE WORKING ARCHITECTURE OF NODE THAT LED TO NODE’S SUCCESS.
IN THIS PAPER, WE ALSO DISTINGUISH NODE FROM JAVASCRIPT, WHICH IS THE BACKBONE ON TOP OF WHICH
NODE HAS BEEN DEVELOPED. THE SAME IS TRUE OF AJAX, WHICH IS OFTEN TIME CONFUSED WITH NODE.
WE PERFORM AN ANALYSIS OF NODE’S PERFORMANCE WITH REAL-TIME DATA BY IMPLEMENTING TWO WELLKNOWN APPLICATIONS (FIBONACCI NUMBER CALCULATION AND READING LARGE TEXT FILE). FOR FURTHER
DEVELOPMENT AND ENHANCEMENT, WE ALSO HIGHLIGHT THE EXISTING LIMITATIONS AND DEFICIENCIES OF
NODE.
3
SIMPLE HTTP SERVER WITH NODE.JS
ONE OF THE COMMON USES OF NODE IS TO BUILD SERVERS. NODE CAN BE USED TO CREATE DIFFERENT
TYPES OF SERVERS [7]. A SIMPLE HTTP (HYPER TEXT TRANSFER PROTOCOL) WEB SERVER THAT RESPONDS
“HELLO NODE!” TO EVERY REQUEST IT RECEIVES CAN BE CREATED WITH VERY FEW LINES OF CODE. TYPE THE
FOLLOWING CODE IN THE TEXT EDITOR, SAVE IT AS HELLO_SERVER.JS AND EXECUTE IT BY TYPING NODE
HELLO_SERVER.JS FROM THE COMMAND PROMPT. THEN, VISIT THIS URL:
HTTP://LOCALHOST:8000 WHICH SHOULD PRINT THE “HELLO NODE!” MESSAGE IN THE BROWSER.
FIGURE 1
SIMPLE HTTP SERVER IN NODE.JS
DESCRIPTION OF FIGURE 1 IS AS FOLLOWS[6]:
0. THE 'USE STRICT' STRING IS A DIRECTIVE THAT ENABLES STRICT MODE, WHICH IS A RESTRICTED
SUBSET OF THE LANGUAGE THAT FIXES A FEW IMPORTANT LANGUAGE DEFICIENCIES AND PROVIDES
STRONGER ERROR CHECKING AND INCREASED SECURITY. FOR EXAMPLE, STRICT MODE MAKES IT
IMPOSSIBLE TO ACCIDENTALLY CREATE GLOBAL VARIABLES.
1. IMPORTS THE HTTP MODULE AND ASSIGN IT TO THE HTTP OBJECT.
2. DEFINES THE PORT NUMBER FROM WHICH THE SERVER WILL BE ACCEPTING CONNECTIONS.
4
3. CREATE THE WEB SERVER BY CALLING THE FACTORY METHOD FROM THE HTTP MODULE AND SEND IT
A CALLBACK FUNCTION. THIS ANONYMOUS FUNCTION TAKES REQ AND RES (HTTP REQUEST AND
RESPONSE) OBJECTS AS PARAMETERS. EVERY TIME A CLIENT MAKES A REQUEST, THIS FUNCTION WILL
GET CALLED.
4. DISPLAYS TO STANDARD OUTPUT THE REQUEST INFORMATION (METHOD, REQUESTED RESOURCE, AND
REQUEST HEADERS) FOLLOWED BY A NEW LINE.
5. WRITES THE RESPONSE LINE AND HEADER FIELDS. A HTTP STATUS CODE NEED TO BE SPECIFIED
(200, FOR EXAMPLE, WHEN THE REQUEST WAS SUCCESSFUL) AND AN OBJECT WITH ALL THE RESPONSE
HEADERS.
6. WRITES THE RESPONSE BODY BEFORE THE END METHOD CLOSES THE HTTP CONNECTION.
7. TELLS THE WEB SERVER TO START ACCEPTING CONNECTIONS ON THE SPECIFIED PORT.
8. CALL THE CONSOLE.LOG METHOD TO PRINT THE INFORMATION TO STANDARD OUTPUT.
NODE.JS MODULES
MODULES ARE PLUGINS, ADD-ONS, AND EXTENSIONS FOR NODE TO HELP WITH THE DEVELOPMENT
PROCESS. THE NODE MODULE EXPOSES A PUBLIC API (APPLICATION PROGRAMMING INTERFACE) THAT ONE
CAN USE AFTER THE MODULE IS IMPORTED INTO THE CURRENT SCRIPT. NODE MODULES CAN BE CATEGORIZED AS
CORE MODULES, THIRD PARTY MODULES, AND LOCAL MODULES. CORE MODULES ARE MODULES THAT COME WITH
NODE’S INSTALLATION AND ARE PRELOADED WHEN A NODE PROCESS STARTS. CORE MODULES ARE REFERENCED
SIMPLY BY NAME WHILE LOCAL MODULES AND THIRD PARTY MODULES MAPS INTO A FILE PATH. THIRD PARTY
MODULES ARE MODULES REGISTERED IN NPM AND INSTALLED USING NPM COMMAND. NPM BY DEFAULT
DUMPS MODULES INSTALLED FROM NPM REPOSITORY INTO NODE_MODULES LOCAL DIRECTORY. AND LOCAL
MODULES ARE SELF-CREATED MODULES [9].
5
TO LOAD A MODULE OF ANY TYPE IN NODE, REQUIRE FUNCTION SHOULD BE USED LIKE THIS:
VAR MODULEX = REQUIRE ('MODULE_NAME');
FOR INSTANCE, MODULES CAN BE LOADED IN NODE IN FOLLOWING WAYS:
//LOADING HTTP CORE MODULE BY DIRECTLY REFERRING TO NAME
VAR HTTP = REQUIRE('HTTP')
// LOADING LOCAL MODULE NAMED MY_MODULE USING ABSOLUTE PATH
VAR MYMODULE = REQUIRE('/HOME/NIMESH/MY_MODULES/MY_MODULE')
//LOADING LOCAL MODULE NAMED MY_MODULE REFERRING BY RELATIVE PATH
VAR MYMODULE = REQUIRE('./MY_MODULE')
//LOADING THIRD PARTY MODULE EXPRESS AFTER INSTALLATION
VAR EXPRESS = REQUIRE('EXPRESS')
SHARING OBJECTS AMONG FILES IN A NODE APPLICATION IS POSSIBLE ONLY BY USING THE COMMONJS
MODULE SYSTEM. FOR A MODULE TO EXPOSE AN API, MODULE AND MODULE.EXPORTS ARE USED, MODULE
IS A VARIABLE REPRESENTING THE MODULE CURRENTLY IN CONSIDERATION AND MODULE.EXPORTS IS THE
OBJECT THAT THE MODULE WILL EXPORT TO OTHER SCRIPT THAT REQUIRES THIS MODULE. FOR INSTANCE, A
MODULE CAN BE CREATED THAT EXPORTS A SET OF FUNCTIONS AS SHOWN IN FIGURE 2 [9].
FIGURE 2
LOCAL NODE.JS MODULE EXPOSING FUNCTIONS
6
THEN, THE CLIENT OF THIS MODULE USES THIS MODULE LIKE THIS:
VAR MYMODULE2 = REQUIRE('./MYMODULE2');
MYMODULE2.PRINTA(); // PRINTS A
MYMODULE2.PRINTB(); // PRINTS B
NPM: NODE PACKAGE MANAGER
BESIDES WRITING LOCAL MODULES ONESELF, AND USING DEFAULT MODULES PROVIDED BY NODE,
MODULES WRITTEN BY OTHER PEOPLE IN THE NODE COMMUNITY CAN BE USED. ALSO, SELF-CREATED LOCAL
MODULES CAN BE PUBLISHED FOR OTHERS. NPM WHICH STANDS FOR NODE PACKAGE MANAGER IS THE MOST
COMMON WAY TO DO SO [10].
NPM IS A BUILT-IN TOOL THAT IS INCLUDED BY DEFAULT WITH EVERY INSTALLATION OF NODE. NPM
HELPS IN EASILY MANAGING MODULES IN NODE PROJECTS BY DOWNLOADING PACKAGES, RESOLVING
DEPENDENCIES, RUNNING TESTS, AND INSTALLING COMMAND LINE UTILITIES [8]. THE MAIN PURPOSE OF THE
NPM MODULAR SYSTEM IS TO EASE THE AVAILABILITY AND INSTALLATION OF BUNCH OF PUBLICLY AVAILABLE,
REUSABLE COMPONENTS VIA AN ONLINE REPOSITORY, WITH VERSION AND DEPENDENCY MANAGEMENT.
MODULES ARE PLUGINS, ADD-ONS, AND EXTENSIONS FOR NODE TO HELP WITH THE DEVELOPMENT PROCESS. A
FULL LIST OF PACKAGED MODULES CAN BE FOUND ON THE NPM WEBSITE HTTPS://NPMJS.ORG/, OR ACCESSED
USING THE NPM CLI (COMMAND LINE INTERPRETER) TOOL THAT AUTOMATICALLY GETS INSTALLED WITH NODE.
THE NODE’S MODULE ECOSYSTEM IS OPEN TO ALL, AND ANYONE CAN PUBLISH THEIR OWN MODULE TO BE
LISTED IN THE NPM REPOSITORY [11].
TO ENSURE THE SUCCESSFUL INSTALLATION OF NPM, ISSUE THE FOLLOWING COMMAND WHICH SHOULD
DISPLAY THE NPM VERSION [8]: NPM –VERSION
7
TO INSTALL MODULES VIA NPM, NPM INSTALL COMMAND SHOULD BE USED WHICH REQUIRES THE
NAME OF THE MODULE PACKAGE TO BE INSTALLED AND ITS VERSION. FOR INSTANCE, MYSQL MODULE PACKAGE
CAN BE INSTALLED BY ISSUING THIS COMMAND [10]:
NPM INSTALL MYSQL@2.0.0
NPM INSTALLS MODULE PACKAGES TO THE NODE_MODULES SUBDIRECTORY OF THE PROJECT. THOUSANDS
OF MODULES IN THE REGISTRY CAN BE EXPLORED USING THE SEARCH AND VIEW COMMANDS. THE SEARCH
COMMAND IS USEFUL WHEN THE NAME OF THE PACKAGE TO BE INSTALLED IS NOT KNOWN SO IT PRINTS THE
NAME AND DESCRIPTION OF ALL MATCHING PUBLISHED MODULES [8, 10].
NPM SEARCH SQL
THE PROPERTIES AND PACKAGE.JSON OF THE PACKAGE CAN BE VIEWED BY RUNNING THE NPM
VIEW COMMAND FOLLOWED BY THE MODULE NAME [8].
NPM VIEW SQL
PACKAGE.JSON IS A JSON (JAVASCRIPT OBJECT NOTATION) FILE THAT ALLOWS TO LOCALLY MANAGE
INSTALLED NPM PACKAGES. IT SERVES AS DOCUMENTATION FOR WHAT PACKAGES THE PROJECT DEPENDS ON,
ALLOWING TO SPECIFY THE VERSION OF A PACKAGE THAT THE PROJECT CAN USE [31].
HOW NODE.JS WORKS?
THE MAIN DISTINCTIVE FEATURES OF THE NODE ARCHITECTURE ARE THE USAGE OF NON-BLOCKING, EVENTDRIVEN, ASYNCHRONOUS I/O CALLS THAT OPERATE IN A SINGLE THREAD. CONVENTIONAL WEB SERVERS HANDLE
CONCURRENCY BY SPAWNING NEW THREADS FOR EACH NEW REQUEST, WHICH CAN MAX OUT THE AVAILABLE
MEMORY. NODE IS LIGHTWEIGHT, EFFICIENT, AND DIFFERENT. IT IS ABLE TO SUPPORT TENS OF THOUSANDS OF
CONCURRENT CONNECTIONS BECAUSE OF ITS UNIQUE FEATURES. EVEN WITH LIMITED MEMORY AND A SINGLE
8
THREAD, NODE CAN ACHIEVE HIGH CONCURRENCY RATE WITHOUT HAVING TO PERFORM CONTEXT SWITCHING
BETWEEN THREADS [12].
THE NODE ARCHITECTURE AND ITS WORKING MECHANISM CAN BE BETTER CLARIFIED BY UNDERSTANDING
ITS UNDERLYING FEATURES AND COMPARING IT WITH PREVIOUS APPROACHES.
NON-BLOCKING EVENT LOOP
NODE IS NON-BLOCKING IN THE SENSE THAT IT IS ABLE TO SERVICE MULTIPLE REQUESTS, AND IT DOESN’T
WASTE CLOCK CYCLES IN I/O TASKS AS IS THE CASE IN THE CONVENTIONAL BLOCKING MODEL. THE
CONVENTIONAL BLOCKING MODEL TENDS TO BLOCK SUBSEQUENT REQUESTS SENT TO A SERVER WHEN IT IS
PERFORMING I/O OPERATIONS SUCH AS READING CONTENT FROM A DATABASE. IN ORDER TO BE NON-BLOCKING,
NODE USES AN EVENT LOOP, A SOFTWARE PATTERN THAT FACILITATES NON-BLOCKING I/O COMBINED WITH
EVENT-DRIVEN I/O, A SCHEME WHERE A REGISTERED EVENT CALLBACK FUNCTION IS INVOKED WHEN SOME
ACTION HAPPENS IN THE PROGRAM [3].
CONSIDER THIS BLOCKING PHP (HYPERTEXT PRE-PROCESSOR) CODE AND NON-BLOCKING NODE.JS CODE
IN FIGURE 3 AND FIGURE 4 RESPECTIVELY [8].
FIGURE 3
EXAMPLE OF BLOCKING PHP CODE EXAMPLE [8]
9
FIGURE 4
EXAMPLE OF NON-BLOCKING NODE.JS CODE [8]
IN THE FIRST EXAMPLE, THE PHP SLEEP() FUNCTION BLOCKS THE THREAD OF EXECUTION. WHILE THE
PROGRAM IS SLEEPING, IT DOES NOT PERFORM ANY TASKS BUT WAITS FOR THE TIME SPECIFIED. THE EXECUTION
IS THUS BLOCKED AS LONG AS IT IS SPECIFIED. AND NO OTHER INSTRUCTIONS ARE EXECUTED UNTIL THE
SPECIFIED TIME ELAPSES, INDICATING IT’S SYNCHRONOUS. NODE ON THE OTHER HAND, LEVERAGES THE EVENT
LOOP. SO, EVEN THE USE OF BLOCKING, SETTIMEOUT() IS NON-BLOCKING IN THE LATTER CASE. IT
REGISTERS AN EVENT FOR THE FUTURE AND LETS THE PROGRAM CONTINUE TO RUN, THEREFORE BEING
ASYNCHRONOUS.
SINGLE-THREADED MODEL
NODE IS A PROCESS THAT RUNS IN AN EVENT LOOP MAKING USE OF A SINGLE THREAD TO SERVICE ANY
REQUESTS. WHEREAS OTHER WEB SERVERS LIKE APACHE SPAWN A NEW THREAD PER REQUEST, WHICH STARTS
WITH A FRESH STATE EVERY TIME [8]. NODE IS POWERFUL CONSIDERING THE WAY IT PERMITS NON-BLOCKING
I/O TO OCCUR IN A SINGLE THREAD WHICH MAKES THE OVERHEAD OF NODE VERY SMALL, BECAUSE NO NEW
THREADS ARE CREATED. WHEN A NODE APPLICATION NEEDS TO PERFORM OPERATIONS, IT SENDS AN
ASYNCHRONOUS TASK TO THE EVENT LOOP, REGISTERS A CALLBACK FUNCTION, AND THEN CONTINUES TO HANDLE
OTHER OPERATIONS. THE EVENT LOOP KEEPS TRACK OF THE ASYNCHRONOUS OPERATION, EXECUTES THE GIVEN
CALLBACK AND WHEN IT COMPLETES, RETURNS ITS RESULT TO THE APPLICATION. NODE IS ABLE TO HANDLE A
10
LARGE NUMBER OF OPERATIONS (EVEN WITH A SINGLE THREAD) BY MANAGING THE THREAD POOL AND
OPTIMIZING THE TASK EXECUTION, SUCH AS CLIENT CONNECTIONS OR COMPUTATIONS [13].
CONSIDER THE FOLLOWING GETLANGUAGES() FUNCTION IN FIGURE 5. THIS FUNCTION GETS
EXECUTED EVERY TIME THE USER MAKES A REQUEST TO THE GETLANGUAGES() FUNCTION AND RETURNS A
COLLECTION OF LANGUAGES IN HTML FORM.
FIGURE 5
EXAMPLE OF SINGLE-THREADED NODE MODEL [8]
THE EQUIVALENT PHP CODE IS SHOWN IN FIGURE 6.
FIGURE 6
EXAMPLE OF MULTIPLE THREAD PER REQUESTS IN PHP [8]
11
A SUBSEQUENT REQUEST TO THE GETLANGUAGES() FUNCTION IN NODE AND PHP GIVES DIFFERENT
RESULTS. NODE HANDLES THE FIRST REQUEST AND RETURNS THE CONCATENATED STRING OF LANGUAGES IN HTML
VARIABLE. THE SECOND REQUEST RETURNS NOTHING BECAUSE THE SCOPE VARIABLE (HTML) IS NOT AFFECTED AS
NODE RUNS IN THE SAME PROCESS. PHP CODE RETURNS THE CONCATENATED STRING OF LANGUAGES IN BOTH
THE CASES BECAUSE THE $LANGUAGES VARIABLE GETS REPOPULATED EACH TIME IN A NEW THREAD PER
REQUEST.
IN ACCORDANCE WITH THE ABOVE EXAMPLE WE CAN DRAW THE DIAGRAM AS SHOWN IN FIGURE 7 AND
FIGURE 8.
FIGURE 7
THREADED MODEL OF APACHE-PHP [8]
12
FIGURE 8
SINGLE-THREADED MODEL OF NODE.JS [8]
ASYNCHRONOUS PROGRAMMING
WHILE THE NON-BLOCKING PART OF NODE MAKES IT ABLE TO ACCEPT VIRTUALLY ALL THE REQUESTS MADE
TO IT, ITS ASYNCHRONOUS PROGRAMMING MAKES IT POSSIBLE TO HANDLE THE REQUESTS BY EFFECTIVELY
UTILIZING THE LIMITED CLOCK CYCLES AND MEMORY AVAILABLE TO ITS SINGLE-THREADED ARCHITECTURE.
ASYNCHRONY IS IN THE ROOT OF NODE BECAUSE ALMOST ALL THE APIS EXPOSED THROUGH NODE MODULES
ARE ASYNCHRONOUS (ALTHOUGH SYNCHRONOUS VERSIONS MAY EXIST). NODE IS ABLE TO ACHIEVE HIGH
CONCURRENCY BY ITS ASYNCHRONOUS CALLS VIA A CALLBACK FUNCTION TO HANDLE THE TASKS IN ITS EVENT
LOOP. NODE INTEGRATES ASYNCHRONOUS PROGRAMMING IN ITS ARCHITECTURE BY MEANS OF ASYNCHRONOUS
APIS WITH CALLBACK FUNCTION.
IN ORDER TO UNDERSTAND THE CONCEPT OF AN ASYNCHRONOUS CALL, CONSIDER THESE THREE EXAMPLES
TO READ A TEXT FILE CONTENT AS SHOWN IN FIGURE 9, FIGURE 10, AND FIGURE 11.
13
FIGURE 9
READING TEXT FILE USING PHP SYNCHRONOUSLY
THIS IS OBVIOUSLY AN INEFFICIENT VERSION IN FIGURE 9, WHICH WASTES LOTS OF CLOCK CYCLES,
DOING NOTHING, WAITING FOR THE COMPUTER FILE SYSTEM TO DO ITS JOB.
FIGURE 10
READING TEXT FILE USING INCORRECT NODE.JS ASYNCHRONOUSLY [10]
FIGURE 10 IS A REWRITTEN NODE VERSION OF THE SYNCHRONOUS PHP SCRIPT IN FIGURE 9. HOWEVER,
THIS CODE IS INCORRECTLY WRITTEN AND THROWS AN ERROR BECAUSE THE FS.OPEN FUNCTION RUNS
ASYNCHRONOUSLY; IT RETURNS IMMEDIATELY, BEFORE THE FILE HAS BEEN OPENED. THE FILE VARIABLE IS
14
NOT SET UNTIL THE FILE HAS BEEN OPENED AND THE HANDLE TO IT HAS BEEN RECEIVED IN THE CALLBACK
SPECIFIED AS THE THIRD PARAMETER TO THE FS.OPEN FUNCTION.
FIGURE 11
READING TEXT FILE USING NODE.JS ASYNCHRONOUSLY [10]
THIS SCRIPT VERSION IN FIGURE 11 TAKES THE CALLBACK FUNCTION PASSED AS THE THIRD ARGUMENT TO
AN ASYNCHRONOUS FUNCTION (FS.OPEN). THE FIRST PARAMETER IN THE CALLBACK INDICATES EITHER THE
SUCCESS OR FAILURE STATUS OF THE LAST OPERATION, AND A SECOND PARAMETER INDICATES SOME SORT OF
ADDITIONAL RESULTS OR INFORMATION FROM THE LAST OPERATION, SUCH AS A FILE HANDLE [10].
THUS, A NON-BLOCKING EVENT LOOP RUNNING ON A SINGLE THREAD WITH ASYNCHRONOUS HANDLING OF
TASKS FORMS A NODE ARCHITECTURE WHICH CAN BE VISUALIZED IN THE DIAGRAM SHOWN IN FIGURE 12.
15
FIGURE 12
NODE.JS ARCHITECTURE [12]
16
CHAPTER 2: JAVASCRIPT VS. NODE.JS
JAVASCRIPT IS A PROTOTYPE-BASED, OBJECT ORIENTED, LOOSELY-TYPED DYNAMIC CLIENT SIDE SCRIPTING
LANGUAGE [37]. IT IS BASED ON THE IMPLEMENTATION OF THE ECMASCRIPT LANGUAGE STANDARD. IT SITS
AND RUNS WITHIN THE BROWSER. IT HAS BEEN EXTENSIVELY USED FOR ADDING INTERACTIVITY TO WEBSITES.
THEREFORE, IT REQUIRES HELP FROM ANOTHER PROGRAMMING LANGUAGE IF IT HAS TO PERFORM ANY
INTERACTIONS WITH THE SERVER.
ALTHOUGH NODE IS BASED ON JAVASCRIPT, AND USES THE CONSTRUCT OF JAVASCRIPT FOR ALMOST ALL
OF ITS FUNCTIONALITY, NODE OFFERS AN ENTIRELY DIFFERENT ENVIRONMENT THAN JAVASCRIPT. NODE CAN BE
REGARDED AS SUPERSET OF JAVASCRIPT. IT HAS BUNDLED ADDITIONAL FUNCTIONALITIES AND FEATURES ON TOP OF
JAVASCRIPT.
NODE IS A WRAPPER ON TOP OF THE HIGH PERFORMANCE GOOGLE CHROME V8 JAVASCRIPT RUNTIME
ENGINE. AS A RESULT, MOST OF THE NODE SYNTAX IS VERY SIMILAR TO FRONT-END JAVASCRIPT, INCLUDING
OBJECTS, FUNCTIONS AND METHODS [9]. HOWEVER, NODE DOES HAVE SOME FEATURES THAT ARE NOT
AVAILABLE IN A CONVENTIONAL BROWSER-BASED JAVASCRIPT. MOST OF THESE FEATURES ADDRESS THE
DEFICIENCIES THAT EXISTED IN JAVASCRIPT. NODE TOOK THE BASIC JAVASCRIPT LANGUAGE AND ADDED
DIFFERENT APIS ON TOP OF IT TO ADD MORE POWER FOR ENHANCING THE NETWORK APPLICATIONS.
MODULE SYSTEM
ONE OF THE DEFICIENCIES IN BROWSER JAVASCRIPT IS LACK OF MODULARITY. THE ONLY WAY TO LINK
TOGETHER DIFFERENT SCRIPTS IS BY USING A DIFFERENT LANGUAGE SUCH AS HTML. EVEN IF INCLUDING A
MODULE IS POSSIBLE IN AN INEFFICIENT WAY, DEPENDENCY MANAGEMENT IS LACKING [9].
17
IT WOULD NOT BE ANY DIFFERENT TO CATEGORIZE JAVASCRIPT AS AN ENVIRONMENT OF GLOBALS, BECAUSE
ALL THE APIS THAT ARE NORMALLY USED ARE GLOBALLY EXPOSED IN A JAVASCRIPT CODE. WHEN ANY THIRDPARTY MODULES ARE INCLUDED, A GLOBAL VARIABLE IS REQUIRED TO EXPOSE AND TO MAKE IT ACCESSIBLE.
JAVASCRIPT DOESN’T DESCRIBE AN API FOR MODULE DEPENDENCY AND ISOLATION IN ITS
SPECIFICATION. AS A RESULT, INCLUDING MULTIPLE MODULES IS ONLY POSSIBLE BY EXPOSING A GLOBAL
VARIABLE. FOR EXAMPLE, THE JQUERY MODULE CAN BE INCLUDED IN A HTML DOCUMENT BY INCLUDING
THIS LINE AT THE HEAD TAG <SCRIPT SRC="HTTP://CODE.JQUERY.COM/JQUERY1.6.0.JS">. THEN, REFER TO THIS MODULE THROUGH THE GLOBAL JQUERY OBJECT. THIS PROCESS
POLLUTES THE GLOBAL NAMESPACE AND CAN RESULT IN POTENTIAL NAMING COLLISIONS [8].
INSTEAD OF DEFINING A NUMBER OF GLOBALS, NODE HAS INTRODUCED A MODULAR SYSTEM (SEE
CHAPTER 1). ONE CAN DEFINE THEIR OWN MODULE OR CAN USE THE CORE MODULES OR THIRD PARTY MODULES.
NODE SHIPS WITH A LOT OF CORE MODULES SUCH AS HTTP, NET, AND FS. THESE MODULES ARE THE
FUNDAMENTAL TOOLKITS FOR BUILDING MODERN APPLICATIONS. MODULARITY IN NODE IS MADE POSSIBLE
BECAUSE OF THESE THREE GLOBALS: REQUIRE, MODULE, AND EXPORTS [8].
GLOBAL OBJECT [8]
THERE IS A GLOBAL OBJECT IN THE BROWSER JAVASCRIPT NAMED WINDOW. VARIABLES CAN BE
DEFINED IN THE WINDOW OBJECT TO MAKE IT GLOBALLY AVAILABLE TO ALL PARTS OF THE APPLICATION CODE.
NODE IMPLEMENTS GLOBALS WITH A CLEAR SEPARATION. IN NODE, THESE TWO GLOBAL OBJECTS ARE USED FOR
THIS PURPOSE:
 GLOBAL: SIMILAR TO A WINDOW OBJECT IN JAVASCRIPT, ANY PROPERTY CAN BE ATTACHED TO A GLOBAL
TO MAKE VARIABLES ACCESSIBLE FROM ANYWHERE IN THE APPLICATION CODE.
18
 PROCESS: THERE IS A PROCESS OBJECT IN NODE THAT ARE ASSIGNED FOR EVERYTHING THAT PERTAINS
TO THE GLOBAL CONTEXT OF EXECUTION.
IN JAVASCRIPT, THERE IS ONE WINDOW OBJECT. WHILE IN NODE, THERE IS ONLY ONE PROCESS AT ANY
GIVEN TIME. FOR INSTANCE, IN JAVASCRIPT, THE WINDOW NAME IS WINDOW.NAME, AND IN NODE, THE
NAME OF THE PROCESS IS PROCESS.TITLE.
BUFFER
ANOTHER DEFICIENCY IN JAVASCRIPT IS ITS SUPPORT FOR HANDLING BINARY DATA [8]. MANIPULATION
OF BINARY DATA IS POORLY SUPPORTED IN JAVASCRIPT LANGUAGE, EVEN THOUGH IT IS OFTEN NECESSARY.
NODE’S BUFFER CLASS RESOLVED THIS DEFICIENCY BY PROVIDING APIS FOR EASY MANIPULATION OF BINARY
DATA [14]. BUFFER IS A NODE’S ADDITION TO FOUR PRIMITIVE DATA TYPES (BOOLEAN, STRING, NUMBER, AND
REGEXP) AND ALL-ENCOMPASSING OBJECTS (ARRAY AND FUNCTIONS ARE ALSO OBJECTS) IN A FRONT-END
JAVASCRIPT. IT USES EXTREMELY EFFICIENT DATA STORAGE [9].
BUFFER, A GLOBAL OBJECT THAT REPRESENTS A FIXED MEMORY ALLOCATION, BEHAVES LIKE AN ARRAY OF
OCTETS, EFFECTIVELY LETTING BINARY DATA TO BE REPRESENTED IN JAVASCRIPT. MOST OF THE NODE APIS THAT
PERFORM DATA I/O TAKE AND EXPORT DATA AS BUFFERS [8].
19
CHAPTER 3: AJAX VS. NODE.JS
NODE IS OFTEN CONFUSED WITH ANOTHER TECHNOLOGY, AJAX, BUT BOTH OF THEM ARE COMPLETELY
DIFFERENT AND SERVE DIFFERENT PURPOSES. THE ONLY SIMILARITY BETWEEN AJAX AND NODE IS THAT THEY
BOTH RUN ON JAVASCRIPT. WHILE NODE IS MOSTLY USED FOR SERVER-SIDE OPERATIONS FOR DEVELOPING A
COMPLETE SERVER-SIDE APPLICATION, AJAX IS USED FOR CLIENT-SIDE OPERATIONS FOR DYNAMICALLY
UPDATING THE CONTENT OF THE PAGE WITHOUT REFRESHING IT. THIS CAN BE MORE CLARIFIED BY DISCUSSING
WHAT AJAX REALLY IS, WHY IT IS USED, WHAT ITS LIMITATIONS ARE AND HOW NODE PROVES SUPERIOR
FULFILLING THOSE LIMITATIONS THAT AJAX HAS.
AJAX
AJAX [18], AN ABBREVIATION FOR "ASYNCHRONOUS JAVASCRIPT AND XML”, IS A SET OF
TECHNIQUES FOR CREATING HIGHLY INTERACTIVE WEBSITES AND WEB APPLICATIONS [18]. AJAX IS BROADLY
USED TO REFER TO ALL THE METHODS OF COMMUNICATING WITH A SERVER FROM A CLIENT USING JAVASCRIPT.
ALTHOUGH, AJAX IS MOSTLY USED FOR ASYNCHRONOUS COMMUNICATION AND MOSTLY INVOLVES XML FOR
DATA TRANSFER, IT CAN BE SYNCHRONOUS AND CAN MAKE USE OF OTHER DATA FORMATS LIKE JSON [16].
AJAX HAS TRANSFORMED THE WAY USERS INTERACT ON THE WEB. APPLICATIONS NO LONGER NEED TO
REFRESH THE WHOLE PAGE IN RESPONSE TO EACH USER INPUT. USING AJAX, APPLICATION CAN CALL A
SPECIFIC PROCEDURE ON THE SERVER AND UPDATE ONLY THE SPECIFIC SECTION OF THE WEBPAGE. BEFORE
AJAX, INTERACTIVITY ON WEB PAGES WAS RATHER CLUMSY AND EXPENSIVE. BECAUSE, FOR ANY USER
INTERACTION TO HAPPEN, AN UPDATED VERSION OF THE PAGE WAS REQUIRED TO BE GENERATED ON THE SERVER,
SENT BACK TO THE BROWSER AND RENDERED. EVEN IF THE REQUIRED UPDATE WAS MINUTE, THE RESULT WAS
20
ALWAYS A WHOLE NEW PAGE REFRESH. THIS MODEL WASTED BOTH BANDWIDTH AND RESOURCES.
AJAX SIMPLIFIED THIS APPROACH BY MODIFYING THE PROCESS AT A GRANULAR LEVEL [17].
IN AJAX, JAVASCRIPT CODE USES A SPECIAL OBJECT BUILT INTO THE BROWSER: AN
XMLHTTPREQUEST OBJECT TO OPEN A CONNECTION TO THE SERVER AND DOWNLOAD DATA FROM THE
SERVER [18]. AJAX IS THE MECHANISM FOR SENDING THE DATA TO, AND RETRIEVING THE DATA FROM, THE
SERVER WITH AJAX. THE OVERALL STEPS INVOLVED IN MAKING AJAX REQUESTS AND GETTING THE
RESPONSES, ARE LISTED AS FOLLOWS [16]:
1. AN XMLHTTPREQUEST OBJECT IS CREATED USING AN
XMLHTTPREQUEST() CONSTRUCTOR.
2. THAT OBJECT IS USED TO MAKE HTTP REQUESTS. TO DO SO, THE OBJECT IS INITIALIZED WITH THE
OPEN() METHOD, WHICH TAKES THREE ARGUMENTS: REQUEST TYPE (STRING: POST, GET, OR
HEAD), URL (STRING) AND ASYNCHRONOUS (BOOLEAN).
3. THE XMLHTTP OBJECT'S READYSTATE PROPERTY HOLDS THE CURRENT STATE OF THE RESPONSE.
THERE ARE FIVE POSSIBLE STATES (0-4): 0 REFERS TO UNINITIALIZED, 1 REFERS TO LOADING, 2 REFERS
TO LOADED, 3 REFERS TO INTERACTIVE AND 4 REFERS TO COMPLETE.
4. SEND THE RESPONSE BACK TO THE CLIENT.
AN INTRODUCTION OF AJAX AND ITS FLOW, COMPARED TO THE CLASSIC WEB MODEL IS DIAGRAMMED
IN FIGURE 13.
21
FIGURE 13
CLASSIC VS. AJAX WEB APPLICATION MODEL [32]
IN FIGURE 14, WE ILLUSTRATE ALL THE STEPS REQUIRED FOR AN AJAX CALL. IN THIS EXAMPLE, USING
AJAX, THE CLIENT UPDATES THE TEXT WITH THE WEATHER FORECAST OF THE CITY WITHIN DIVS WITH THE TEXT
READ FROM A TEXT FILE INITIATED BY A WINDOWS ONLOAD EVENT [18].
22
<?PHP
//PROCESSJSON.PHP READS CONTENT FROM DATA.JSON FILE AND RETURN
//BACK THE DATA IN JSON FORMAT
ECHO FILE_GET_CONTENTS("DATA.JSON");
?>
FIGURE 14
EXAMPLE OF AJAX CALL
AJAX ENABLES APPLICATIONS TO UPDATE PAGES, ONLY IN RESPONSE TO USER ACTIONS ON THE PAGE. IT
DOES NOT SOLVE THE PROBLEM OF UPDATES COMING FROM THE SERVER. IT DOES NOT OFFER A WAY TO PUSH
INFORMATION FROM THE SERVER TO THE BROWSER [17]. WITH AJAX, THE CLIENTS ALWAYS HAVE TO QUERY
THE SERVER CONTINUOUSLY FOR ANY NEW INFORMATION OR DATA THAT IS AVAILABLE FOR THE APPLICATION. THE
SERVER CANNOT PUSH INFORMATION TO THE CLIENT WITHOUT BEING ASKED FIRST. THE CONSEQUENCE IS AN
23
APPLICATION USER WILL NOT SEE THE DATA UNLESS THEY ASK FOR IT FROM THE SERVER. IN TURN, THE DATA
WHICH THE APPLICATIONS GETS WILL BE OUTDATED I.E. THE DATA WILL NOT BE REAL-TIME. THIS IS WHERE
AJAX APPEARS INFERIOR TO WHAT NODE HAS TO OFFER. ALTHOUGH, THERE ARE SOME TECHNIQUES USING
AJAX SUCH AS AJAX POLLING AND AJAX LONG POLLING, TO MAKE APPLICATION SIMULATE REAL-TIME,
THERE ARE CAVEATS TO THESE APPROACHES.
AJAX POLLING [32]
IN AJAX POLLING, THE REQUEST IS SENT FROM THE CLIENT TO THE SERVER AT A REGULAR INTERVAL OF
TIME TO CHECK FOR ANY NEW UPDATES THAT ARE AVAILABLE. IF THERE ARE ANY NEW UPDATES AVAILABLE FROM
THE SERVER, THEY ARE SENT BACK. THE DRAWBACK TO THIS APPROACH IS THAT THERE WILL STILL BE DELAYS AND
WILL NOT REPLICATE A REAL-TIME COMMUNICATION. ALSO, THERE WILL BE LOTS OF REQUESTS AND RESPONSES TO
AND FROM THE CLIENT AND SERVER EVEN IF THERE ARE NO UPDATES. THIS IS SHOWN IN FIGURE 15.
FIGURE 15
AJAX POLLING [32]
AJAX LONG POLLING [32]
ANOTHER APPROACH IS AJAX LONG POLLING, WHICH IS JUST A SLIGHT VARIATION TO AJAX POLLING.
LIKE REGULAR POLLING, WHEN THE SERVER RECEIVE REQUESTS, IT IMMEDIATELY RETURNS THE NEW DATA IF IT'S
24
AVAILABLE. HOWEVER, IF THERE ARE NO NEW DATA TO RETURN, SERVER KEEPS THE CONNECTION OPEN, AND
RETURNS THE DATA ONCE IT BECOMES AVAILABLE. ONCE THE CLIENT RECEIVES DATA, THE CLIENT IMMEDIATELY
SENDS ANOTHER REQUEST TO THE SERVER AGAIN. THIS IS SHOWN IN FIGURE 16.
FIGURE 16
AJAX LONG POLLING [32]
REAL TIME APPLICATION DEVELOPMENT WITH SOCKET.IO [32]
THERE ARE MORE TECHNIQUES BESIDES AJAX POLLING AND AJAX LONG POLLING, TO ESTABLISH A
REAL TIME COMMUNICATION BETWEEN THE CLIENT AND THE SERVER OR AT LEAST RESEMBLE IT LIKE SSE
(SERVER SENT EVENTS) AND WEB SOCKETS. BUT NOTHING GETS THE JOB DONE FOR BI-DIRECTIONAL
COMMUNICATION BETWEEN CLIENT AND SERVER IN REAL-TIME AS SOCKET.IO DOES. SSES ALLOW SERVERS TO
PUSH DATA TO THEIR CLIENTS, BUT THE CLIENT CAN’T SEND DATA BACK TO THE SERVER. WEB SOCKETS ALLOWS
SIMULTANEOUS DUPLEX COMMUNICATION IN BOTH DIRECTIONS, BETWEEN CLIENT AND SERVER, BUT IT’S AN
ENTIRELY NEW PROTOCOL.
SOCKET.IO IS A LIBRARY FOR REAL-TIME WEB APPLICATIONS. IT IS A MODULE BUILT IN NODE AND IT CAN
BE INSTALLED IN NODE APPLICATION AS:
NPM INSTALL SOCKET.IO
25
SOCKET.IO IS EVENT-DRIVEN AND HAS BOTH SERVER-SIDE AND CLIENT-SIDE COMPONENTS EXHIBITING
SIMILAR APIS. BASICALLY, SOCKET.IO IS MADE UP OF TWO PARTS:
 A SERVER THAT MOUNTS ON OR ATTACHES TO NODE’S HTTP SERVER.
 A CLIENT-SIDE LIBRARY THAT ALLOWS INTERACTION WITH THE SERVER.
BOTH THE CLIENT AND SERVER PARTS ESSENTIALLY DO THE SAME THING: ALLOW THE SENDING (OR
EMITTING) OF EVENTS AND PROVIDE A WAY TO DEFINE EVENT HANDLERS. IN ORDER TO SETUP THE SOCKET.IO
SERVER COMPONENTS, THE FOLLOWING STEPS SHOULD BE FOLLOWED:
 CREATE A SOCKET.IO SERVER AND ATTACH IT TO EXISTING HTTP SERVER.
 DEFINE WHAT THE SERVER WILL DO ON CONNECTION.
 WITHIN THAT CONNECTION HANDLER:
O DEFINE WHAT THE SERVER WILL HANDLE OTHER CUSTOM EVENTS.
O SEND MESSAGES.
LIKEWISE, IN ORDER TO SETUP SOCKET.IO ON THE CLIENT, FOLLOWING STEPS COULD BE FOLLOWED:
 BRING IN THE CLIENT SIDE LIBRARY.
 CREATE A SOCKET OBJECT (AN INTERFACE TO THE CONNECTION).
 USE THAT SOCKET OBJECT TO:
O SEND MESSAGES.
O DEFINE CALLBACKS THAT GET TRIGGERED ON SPECIFIC EVENTS.
TO UNDERSTAND THE REAL USAGE OF SOCKET.IO, CONSIDER THE FOLLOWING SCRIPT IN FIGURE 17, WHICH
IMPLEMENTS THE SAME WEATHER UPDATE SCENARIO, ALREADY DISCUSSED FOR AJAX.
THE SERVER-SIDE NODE.JS SCRIPT IS SHOWN IN FIGURE 17. THE FUNCTIONALITIES OF IMPORTANT
STATEMENTS ARE DESCRIBED IN A COMMENT SECTION.
26
FIGURE 17
EXAMPLE OF SOCKET.IO SERVER SIDE SCRIPT
IN THE EXAMPLE, THE DATA.JSON FILE USED FOR DATA INTERCHANGE APPEARS AS:
{"CITY": "MINNEAPOLIS", "MAX_TEMP": "42", "MIN_TEMP": "10"}
THE CLIENT-SIDE SCRIPT IS SHOWN IN FIGURE 18.
FIGURE 18
EXAMPLE OF SOCKET.IO CLIENT SIDE
27
THE SOCKET.IO MODEL DIAGRAM CAN BE DEPICTED AS SHOWN IN FIGURE 19.
FIGURE 19
BLOCK DIAGRAM OF SOCKET.IO [32]
28
CHAPTER 4: WHY NODE.JS?
NODE HAS BEEN POPULAR AMONG DEVELOPERS AND WITH ITS SUCCESS HAS ATTRACTED MANY HIGH-TECH
COMPANIES WHO HAVE ADOPTED NODE REPLACING THEIR EXISTING TECHNOLOGIES. THERE ARE MANY
REASONS FOR NODE’S POPULARITY AND WHY ONE SHOULD USE NODE FOR THEIR APPLICATION DEVELOPMENT.
HIGH PERFORMANCE WEB-SERVERS [5]
WITH THE EMERGENCE OF WEB 2.0 AND THE INTERNET CONNECTIVITY IN DIFFERENT DEVICES: CELL
PHONES, TABLETS, DESKTOP, AND LAPTOPS; THE SCOPE OF APPLICATION HAS HIGHLY SCALED UP. ALIGNING
WITH THE DEMANDS TO SUPPORT HIGHER NUMBERS OF USERS AND DELIVER A REAL-TIME EXPERIENCE IN THE
APPLICATION HAS BECOME THE MAJOR CHALLENGE. WHILE INSTALLING NEW HARDWARE ADDS POWER TO
CONTINUALLY INCREASING DEMANDS FOR SPEED AND FASTER CONNECTIVITY IN THE APPLICATIONS, WHICH IS NOT
THE OPTIMAL SOLUTION AS IT MORE EXPENSIVE. NODE ATTEMPTS TO SOLVE THIS PROBLEM BY INTRODUCING THE
ARCHITECTURE TERMED EVENT-DRIVEN PROGRAMMING FOR WEB SERVERS. NODE IS MUCH MORE EFFICIENT
WITH MEMORY THAN CONVENTIONAL SERVERS AND CAN KEEP PROVIDING A VERY FAST RESPONSE TIME DESPITE
MANY CONCURRENT USERS. THIS IS BECAUSE NODE RUNS IN A SINGLE THREAD, AND WHENEVER NODE HAS TO
DO SOMETHING SLOW, LIKE WAIT FOR A CONFIRMATION, IT SIMPLY MOVES ON TO SERVICE ANOTHER REQUEST.
CONVENTIONAL APPROACHES CAN ACCOMPLISH THIS BY MULTI-THREADING, WHICH REQUIRES MORE MEMORY.
AT THE SAME TIME CONVENTIONAL APPROACHES ARE COMPLEX AND INVOLVE CONTEXT SWITCHING. NODE IS
PREFERABLE IN THIS ASPECT, PROVIDING A LESS EXPENSIVE, SCALABLE, AND HIGH PERFORMANCE APPLICATION
ENVIRONMENT.
29
POPULARITY OF JAVASCRIPT [19]
SINCE EARLY IN THE EVOLUTION OF WWW, JAVASCRIPT HAS BEEN THERE IN THE BROWSER. EVEN
AVAILABLE WHEN AJAX EMERGED, JAVASCRIPT WAS VITAL. THIS HAS LED TO THE POPULARITY OF JAVASCRIPT
AMONG DEVELOPERS, DESPITE SOME CRITICISM. NO MATTER WHICH SERVER-SIDE SCRIPTING LANGUAGE IS
USED, JAVASCRIPT HAS BEEN THE CHOICE FOR CLIENT-SIDE SCRIPTING. FAMILIARITY WITH JAVASCRIPT AND
ADHERENCE OF NODE TO JAVASCRIPT, WITH CAPABILITIES TO CODE IN THE SERVER-SIDE AND NUMEROUS OTHER
FEATURES HAS DEVELOPERS TO ADOPT NODE. BY LEVERAGING THE BEST FEATURES OF JAVASCRIPT AS A
LANGUAGE AND NURTURING A VIBRANT COMMUNITY, NODE HAS BECOME A POPULAR PLATFORM AND
FRAMEWORK, WITH CONTINUED ADOPTION GROWTH.
ONE LANGUAGE MULTIPLE FUNCTIONALITY [19]
NODE ALLOWS RUNNING JAVASCRIPT CODE ON THE SERVER-SIDE AS WELL AS THE CLIENT-SIDE. NODE HAS
ELEVATED JAVASCRIPT TO A NEW HEIGHT OF APPLICATION DEVELOPMENT. ANY SYSTEM DEVELOPED IN NODE
WILL RUN FROM JUST ABOUT ANYWHERE-ON A LOCAL OR ON A CLIENT’S PLATFORM, OR FROM A HIGH-END NODE
SERVER HOSTED ELSEWHERE. IN ADDITION, THERE ARE THOUSANDS OF NODE MODULES AVAILABLE FOR FREE.
APPLICATIONS CAN BE DEVELOPED LOCALLY USING NODE’S BUILT-IN WEB SERVER. SO, UNLIKE OTHER
PROGRAMMING LANGUAGES, WHERE A SEPARATE WEB SERVER IS REQUIRED FOR IT TO GET HOSTED OR EVEN
TESTED, NODE HAS EVERYTHING IT REQUIRES-A WEB SERVER, CLIENT-SIDE SCRIPTING, AND SERVER-SIDE
SCRIPTING.
SIMPLE DEVELOPMENT ENVIRONMENT [19]
CONVENTIONALLY, SETTING UP THE DEVELOPMENT ENVIRONMENT FOR NEW PROJECTS HAS BEEN
CUMBERSOME FOR DEVELOPERS. IT REQUIRES TIME AND EFFORT, THE FIRST STEP INVOLVES GETTING THE
DEVELOPMENT ENVIRONMENT RIGHT, MAKING SURE ALL THE SOFTWARE PACKAGES ARE INSTALLED WITH
30
REQUIRED VERSIONS, AND THEN PUTTING THE CODE IN THE REPOSITORY TO TEST. MANY TIMES A CONVENTIONAL
ENVIRONMENT REQUIRES DEVELOPER TO LOOK BACK AND CHECK IF SOMETHING WAS MISSED. NODE
SIMPLIFIES THIS PROCESS, INCREASING THE DEVELOPER’S PRODUCTIVITY. IN THE NODE ENVIRONMENT,
DEVELOPERS SIMPLY DOWNLOAD NODE, PULL THEIR CODE FROM THE REPOSITORY, AND GO FROM THERE. NODE
INSTALLERS ARE AVAILABLE FOR ALL THE MAJOR OSES: MAC, LINUX, WINDOWS AND SUNOS. THE SOURCE
CODE CAN ALSO BE DOWNLOADED AND BUILT FROM THE GROUND UP. SO, SETTING UP THE NODE’S
DEVELOPMENT ENVIRONMENT IS COMPARATIVELY MUCH SIMPLER (SEE APPENDIX).
GOOD REPUTATION [19]
NODE HAS EARNED A GOOD REPUTATION IN THE TECH INDUSTRY. MANY BIG PLAYERS IN THE TECHNOLOGY
INDUSTRY ARE USING NODE. NODE PLAYS A CRITICAL ROLE IN THE TECHNOLOGY STACK OF MANY HIGH-PROFILE
COMPANIES WHO DEPEND ON ITS UNIQUE BENEFITS. NODE GIVES MICROSOFT AZURE USERS THE FIRST END-TOEND JAVASCRIPT EXPERIENCE FOR THE DEVELOPMENT OF A WHOLE NEW CLASS OF REAL-TIME APPLICATIONS.
NODE’S I/O EVENT MODEL FREED EBAY FROM WORRYING ABOUT LOCKING AND CONCURRENCY ISSUES
COMMON WITH MULTI-THREADED ASYNCHRONOUS I/O. ON THE SERVER-SIDE, THE ENTIRE MOBILE SOFTWARE
STACK OF LINKEDIN IS COMPLETELY BUILT IN NODE [30].
PAYPAL, AFTER MAKING A MOVE FROM JAVA TO NODE FOR THEIR EXISTING PROJECTS, SAW SIGNIFICANT
IMPROVEMENT OVER JAVA. USING NODE, THE RE-WRITTEN APP WAS DELIVERED IN HALF THE TIME WITH FEWER
DEVELOPERS, USING FEWER LINES OF CODE BUT WITH ABILITY TO HANDLE TWICE AS MANY REQUESTS EACH WITH
ONE-THIRD LESS LATENCY. HENCE, THEY SAW THEIR DEVELOPMENT AND PRODUCT PERFORMANCE INCREASE
DRAMATICALLY AFTER THE SWITCH [19].
31
CHAPTER 5: NODE.JS SECURITY
THE SURGE OF DEMAND FOR JAVASCRIPT IN THE PROGRAMMING FIELD HAS EXPANDED IN SCOPE FROM
CLIENT-SIDE TO SERVER-SIDE. AS A RESULT, SSJS (SERVER-SIDE JAVASCRIPT) FEATURES ARE AVAILABLE ALMOST
EVERYWHERE, BE IT IN DATABASE SERVERS (LIKE MONGO DB), FILE SERVERS, AND WEB SERVERS (LIKE NODE).
THIS MOVE OF JAVASCRIPT TO SSJS HAS BROUGHT MANY BENEFITS, BUT ALSO BUNDLED TOGETHER SOME
DRAWBACKS IN TERMS OF SECURITY. CLIENT-SIDE SCRIPT INJECTION, THAT HAS EXISTED FOR A LONG TIME CAN
BE EXPLOITED TO EXECUTE ON THE SERVER. SERVER-SIDE SCRIPT INJECTIONS ARE EQUALLY EASY TO
ACCIDENTALLY INTRODUCE INTO SERVER-SIDE APPLICATION CODE AS THEY ARE FOR CLIENT-SIDE CODE.
COMPARATIVELY, THE EFFECTS OF SSJS INJECTION ARE FAR MORE SEVERE. ONE OF SUCH VULNERABILITY IS
CROSS SITE SCRIPTING. SINCE, NODE IS BASED ON JAVASCRIPT IT IS ALSO VULNERABLE TO CROSS SITE
SCRIPTING.
CROSS SITE SCRIPTING (XSS)
XSS IS AN ATTACK THAT ALLOWS THE ATTACKER TO INJECT MALICIOUS SCRIPT IN THE WEB APPLICATION.
XSS VULNERABILITIES ARE CAUSED BY A FAILURE IN THE WEB APPLICATION TO PROPERLY VALIDATE USER INPUT.
BY SUBVERTING CLIENT-SIDE SCRIPTING LANGUAGES, AN ATTACKER CAN TAKE FULL CONTROL OVER THE VICTIM’S
BROWSER [20].
XSS VULNERABILITIES ARE NOT ONLY EXTREMELY DANGEROUS; THEY ARE EXTREMELY WIDESPREAD AS
WELL. THE OPEN WEB APPLICATION SECURITY PROJECT (OWASP) CURRENTLY RANKS XSS AS THE SECOND
MOST DANGEROUS THREAT TO WEB APPLICATIONS (BEHIND SQL INJECTION), AND THE 2011 CWE/SANS
TOP 25 MOST DANGEROUS SOFTWARE ERRORS RANKS XSS AS THE #4 THREAT (DOWN FROM #1 IN THE 2010
LIST) [21].
32
CONSIDER THIS BLOCK OF CLIENT-SIDE JAVASCRIPT CODE IN FIGURE 20, INTENDED TO PROCESS WEATHER
FORECAST REQUESTS. THE CODE USES JSON AS THE MESSAGE FORMAT AND XMLHTTPREQUEST AS THE
REQUEST OBJECT.
FIGURE 20
EXAMPLE OF XSS IN CLIENT-SIDE JAVASCRIPT
THE BLOCK OF CODE IN FIGURE 20 MAKES A CALL TO THE EVAL FUNCTION THAT POTENTIALLY
INTRODUCES A SERIOUS VULNERABILITY. THIS FUNCTION TAKES A STRING ARGUMENT WHICH CAN REPRESENT AN
EXPRESSION, STATEMENT, OR A SERIES OF STATEMENTS, AND IT IS EXECUTED AS ANY OTHER JAVASCRIPT SOURCE
CODE [22]. AN ATTACKER CAN MODIFY THE JSON RESPONSE LIKE THIS STATEMENT TO LEAK THE COOKIE
INFORMATION OF THE CLIENT.
{"CITY": "MSP", "MAXTEMP": "<SCRIPT>DOCUMENT.COOKIE</SCRIPT>"};
AGAIN CONSIDER A VERY SIMILAR BLOCK OF SERVER-SIDE JAVASCRIPT CODE IN FIGURE 21 DESIGNED TO
PARSE JSON REQUESTS, EXECUTING ON THE SERVER TO IMPLEMENT A NODE WEB SERVER.
33
FIGURE 21
EXAMPLE OF XSS IN SERVER-SIDE JAVASCRIPT
THE CODE SNIPPET IN FIGURE 21 EXPOSES A SIMILAR KIND OF VULNERABILITY CAUSED BY THE EVAL
FUNCTION AS IN THE CLIENT-SIDE EXAMPLE. HOWEVER, IN THIS CASE, THE EFFECTS OF THE VULNERABILITY ARE
MUCH MORE SEVERE THAN A LEAKAGE OF A VICTIM'S COOKIES. FOR EXAMPLE, A NORMAL JSON MESSAGE TO
THE FORECAST SERVICE LOOKS LIKE THIS:
{"CITY": "MSP", "MAXTEMP": "65"}
HOWEVER, AN ATTACKER CAN MODIFY JSON MESSAGE WITH MALICIOUS CONTENT LIKE THIS:
{"CITY": "MSP", "MAXTEMP": "PROCESS.EXIT()"}
THE SERVER WOULD EXECUTE ABOVE INJECTED COMMAND TO POTENTIALLY KILL THE PROCESS AND
PROGRAM AS A WHOLE. ONE SHOULD ENSURE THAT ALL USER INPUTS ARE PARSED AND FILTERED PROPERLY TO
ENSURE SUCH VULNERABILITY ARE NOT EXPOSED. THE BEST HEURISTIC TO FOLLOW REGARDING USER INPUT
FILTERING IS TO DENY ALL BUT A PRE-SELECTED ELEMENT SET OF BENIGN CHARACTERS IN THE WEB INPUT STREAM
[20].
ANOTHER SOLUTION IS RUNNING JAVASCRIPT IN STRICT MODE THAT REDUCES MOST OF THE HARMFUL
PRACTICES IN JAVASCRIPT CAUSED BY THE CULPRIT EVAL AND MAKES THE COMPILER THROW ERRORS IN ITS
BAD USAGE. SIMPLY PLACE USER STRICT DIRECTIVE AT THE TOP OF JAVASCRIPT. THE MOST IMPORTANT
34
VULNERABILITY ADDRESSED BY STRICT MODE IS THAT THE EVAL() FUNCTION CANNOT BE RENAMED AND HENCE
PREVENTS AN ATTACKER FROM INTRODUCING NEW VARIABLES TO THE GLOBAL SCOPE. AS SHOWN IN FIGURE 22,
IN STRICT MODE, USE OF EVAL THROWS ERRORS.
FIGURE 22
USE OF STRICT MODE IN NODE.JS
DENIAL OF SERVICE (DOS)
DOS IS AN ATTACK WHICH MAKES INFORMATION OR DATA UNAVAILABLE TO ITS INTENDED HOSTS [23]. IT
IS ONE OF THE SIMPLEST FORMS OF NETWORK ATTACK. INSTEAD OF TRYING TO STEAL OR MODIFY INFORMATION,
THE AIM OF THIS ATTACK IS TO PREVENT ACCESS TO THE SERVICE OR RESOURCE. THIS IS USUALLY ACHIEVED BY
FLOODING THE SERVER WITH A LARGE AMOUNT OF REQUESTS, TYING UP THE SERVER'S RESOURCES AND
PREVENTING LEGITIMATE REQUESTS FROM BEING FULFILLED [5].
THIS MEANS OF DOS ATTACK MAY BE NOT BE QUITE EFFECTIVE IN THE NODE PLATFORM AS IT WOULD BE
IN CONVENTIONAL WEB SERVERS, BUT CPU INTENSIVE TASKS CAN SUCCUMB TO DOS VICTIM [22]. THIS IS
BECAUSE THE NODE ARCHITECTURE USES VERY FEW SYSTEM RESOURCES AND BOMBARDING IT WITH TONS OF
REQUESTS COMPRISING THE DOS ATTACK BECOMES INEFFECTIVE IN NODE BUT IT MIGHT EXHIBIT BANDWIDTH
PROBLEMS.
THERE ARE SEVERAL OTHER WAYS TO PERFORM DOS ATTACKS IN NODE UNLIKE CONVENTIONAL REQUEST
FLOODING WHICH IS NOT EFFECTIVE (AS DISCUSSED ABOVE). ONE OF THE WAYS TO ATTACK IS BY USING FLAWS
35
IN THE SYSTEM SUCH AS A LACK OF ERROR HANDLING OR OTHER METHODS TO MAKE THE SERVER UNRESPONSIVE.
FOR INSTANCE, A DOS ATTACK CAN BE SIMULATED BY ISSUING THIS FOLLOWING WHILE COMMAND [21]:
WHILE(1)
THE INFINITE WHILE LOOP WILL CONSUME ALL THE PROCESSOR TIME IN THE TARGETED SERVER SLOWING
IT DOWN. THIS WILL MAKE THE SERVER UNRESPONSIVE AND THUS WILL MAKE IT UNABLE TO HANDLE ANY
REQUESTS.
ANOTHER WAY TO PERFORM A DOS ATTACK IN NODE WOULD BE TO SIMPLY EXIT OR KILL THE RUNNING
PROCESS [21]:
PROCESS.EXIT()
PROCESS.KILL(PROCESS.PID)
THE APPROPRIATE APPROACH TO HANDLE A DOS ATTACK IS BY IMPLEMENTING A GOOD ERROR HANDLING
CODE. IT’S THE DEVELOPER’S RESPONSIBILITY TO HANDLE THE SITUATION WHERE THE APPLICATION WILL PUSH
THE SERVER IN A STALEMATE SITUATION. ONE OF THE POSSIBLE SOLUTIONS IS TO USE THE TRY...CATCH
STATEMENT. TRY-CATCH STATEMENTS TRIES TO EXECUTE GOOD CODE INSIDE TRY BLOCK AND UPON ERROR WILL
BE DIRECTED TO THE CATCH STATEMENT TO HANDLE THE ERROR. AN EXAMPLE IS SHOWN IN FIGURE 23.
FIGURE 23
EXAMPLE OF TRY CATCH BLOCK
36
REGULAR EXPRESSION DOS (REDOS)
ALTHOUGH THE RESPONSIVENESS OF THE SERVER AND AVAILABILITY OF RESOURCES ARE NOT QUITE
CONSIDERED AS SECURITY ISSUE, THEIR IMPACTS CAN BE SEVERE. NODE IS BASED ON A SINGLE THREAD EVENT
LOOP ARCHITECTURE WHICH MAKES IT A SUITABLE CANDIDATE WITH RESPECT TO LOSS OF RESOURCE AVAILABILITY.
THERE ARE MANY WAYS TO BLOCK THE EVENT LOOP. ONE WAY AN ATTACKER CAN DO THAT IS WITH REDOS
[24].
“THE REGULAR EXPRESSION DENIAL OF SERVICE (REDOS) IS A DENIAL OF SERVICE ATTACK, THAT
EXPLOITS THE FACT THAT MOST REGULAR EXPRESSION IMPLEMENTATIONS MAY REACH EXTREME SITUATIONS
THAT CAUSE THEM TO WORK VERY SLOWLY (EXPONENTIALLY RELATED TO INPUT SIZE) [25].”
IF AN APPLICATION USES REGULAR EXPRESSIONS CONTAINING VULNERABLE REGEX, IT IS OPEN TO
ATTACKERS WHO CAN PREPARE A WELL-CRAFTED INPUT TO MAKE THE SYSTEM UNRESPONSIVE. ALTERNATIVELY, IF
A REGEX ITSELF IS AFFECTED BY A USER INPUT, THE ATTACKER CAN INJECT A VULNERABLE REGEX, AND HARM THE
SYSTEM [25].
IN FIGURE 24, A VULNERABLE REGEX EXAMPLE HAS BEEN CONSIDERED THAT ATTEMPTS TO VALIDATE AN
EMAIL ADDRESS ON THE SERVER.
FIGURE 24
EXAMPLE OF VULNERABLE REGEX [24]
THE IMPACT OF VULNERABLE REGEX IN FIGURE 24 CAN BE CHECKED WITH THIS TEST SCRIPT SHOWN IN
FIGURE 25 TO ANALYZE THE RESPONSIVENESS OF THE SERVER.
37
FIGURE 25
ANALYSIS OF VULNERABLE REGEX [24]
HERE IS THE OUTPUT FROM THE SCRIPT IN FIGURE 25:
TRUE
GOOD INPUT TIME:
[ 0, 13792252 ]
FALSE
BAD INPUT TIME:
[ 7, 935494039 ]
A CHECK FOR BAD REGULAR EXPRESSIONS CAN BE DONE IN AN AUTOMATED WAY BY USING A MODULE
CALLED SAFE-REGEX. ADDITIONALLY, OWASP HAS A LIST OF REGULAR EXPRESSIONS FOR COMMON VALIDATIONS
THAT CAN BE UTILIZED FOR VALIDATIONS IN OUR APPLICATIONS [26].
FIRST, INSTALL THE SAFE-REGEX MODULE BY USING THE NPM COMMAND.
NPM INSTALL SAFE-REGEX
THEN CHECK FOR GOOD REGULAR EXPRESSION AS SHOWN IN FIGURE 26.
FIGURE 26
CHECK FOR SAFE REGULAR EXPRESSION [24]
38
FILE SYSTEM ACCESS [21]
NODE PROVIDES THE FILE I/O FUNCTIONALITY IN THE BUILT-IN MODULE THAT COMES WITH THE NODE
INSTALLATION. ATTACKERS CAN USE THE APIS EXPOSED IN THIS MODULE TO READ THE CONTENTS OF THE FILES
FROM THE LOCAL SYSTEM. A FILE MODULE CAN BE IMPORTED BY ISSUING THIS COMMAND:
VAR FS = REQUIRE('FS');
ALL THE METHODS IN THE FS MODULE HAVE TWO FORMS: ASYNCHRONOUS AND SYNCHRONOUS. THE
ASYNCHRONOUS METHOD ALWAYS TAKES A COMPLETION CALLBACK AS ITS LAST ARGUMENT. DEPENDING ON THE
METHOD, THE ARGUMENTS PASSED TO THE COMPLETION CALLBACK DIFFERS, BUT THE FIRST ARGUMENT IS ALWAYS
FOR AN EXCEPTION. IN CASE THE OPERATION WAS COMPLETED SUCCESSFULLY, THE FIRST ARGUMENT WILL BE
EITHER NULL OR UNDEFINED. WHEN USING THE SYNCHRONOUS FORM, ANY EXCEPTIONS ARE IMMEDIATELY
THROWN [27].
FOLLOWING ARE THE DETAILS OF SOME OF THE FILE I/O METHODS IN THE FS MODULE THAT THE
ATTACKER CAN UTILIZE:
1) FS.READDIRSYNC(PATH) [27]
THIS IS THE SYNCHRONOUS READDIR FUNCTION THAT READS THE CONTENTS OF A DIRECTORY
SPECIFIED IN THE PATH AS ARGUMENT. IT RETURNS AN ARRAY OF FILENAMES EXCLUDING '.' AND '..'.
2) FS.READFILESYNC(FILENAME[, OPTIONS]) [27]
THIS IS THE SYNCHRONOUS VERSION OF FS.READFILE. IT RETURNS THE CONTENTS OF
THE FILENAME. IF THE ENCODING OPTION IS SPECIFIED THEN THIS FUNCTION RETURNS A STRING
OTHERWISE A BUFFER.
39
IT CAN TAKE TWO ARGUMENTS:
 FILENAME STRING
 OPTIONS OBJECT
O ENCODING STRING | NULL DEFAULT = NULL
O FLAG STRING DEFAULT = 'R'
3) FS.WRITEFILESYNC(FILENAME, DATA[, OPTIONS]) [27]
THIS IS THE SYNCHRONOUS VERSION OF FS.WRITEFILE. IT RETURNS UNDEFINED. IT TAKES THE
FOLLOWING ARGUMENTS:
 FILENAME STRING
 DATA STRING | BUFFER
 OPTIONS OBJECT
O ENCODING STRING | NULL DEFAULT = 'UTF8'
O MODE NUMBER DEFAULT = 438
O FLAG STRING DEFAULT = 'W'
THERE IS A WAY TO ADD THE FILE SYSTEM ACCESS FUNCTIONALITY IN THE CURRENTLY RUNNING SCRIPT
EVEN IF IT ORIGINALLY DOESN’T EXIST BY INCLUDING THE APPROPRIATE REQUIRE COMMAND SUCH AS THE
FS MODULE. AN ATTACKER CAN UTILIZE ANY OF THE METHODS DESCRIBED ABOVE TO LIST THE CONTENTS OF THE
DIRECTORY OR EVEN THE FILE AND EVEN WRITE TO THAT. THIS CAN BE ACCOMPLISHED BY ISSUING THE SERIES
OF COMMANDS AND METHODS CHAINED TOGETHER LIKE THIS:
RESPONSE.END(REQUIRE('FS').READDIRSYNC('.').TOSTRING())
RESPONSE.END(REQUIRE('FS').READDIRSYNC('..').TOSTRING())
40
THE PRECEDING SCRIPTS WILL LIST THE CONTENTS OF THE CURRENT DIRECTORY AND PARENT DIRECTORY
RESPECTIVELY. A COMPLETE DIRECTORY STRUCTURE OF THE ENTIRE FILE SYSTEM CAN BE BUILT THIS WAY. THE
ACTUAL CONTENTS OF A FILE CAN BE LISTED BY ISSUING THE FOLLOWING COMMAND:
RESPONSE.END(REQUIRE('FS').READFILESYNC(FILENAME))
MORE DANGER LIES IN THE POSSIBILITY OF WRITING TO THE FILE AS COMPARED TO JUST READING THE
CONTENTS OF THE FILE. THIS CAN BE DONE AND IS DEMONSTRATED BELOW:
VAR FS = REQUIRE('FS');
VAR CURRENTFILE = PROCESS.ARGV[1];
FS.WRITEFILESYNC(CURRENTFILE, 'HACKED' + FS.READFILESYNC(CURRENTFILE));
THIS ATTACK SHOWS HOW EASY IT IS TO WRITE TO A FILE BY PREPENDING THE STRING “HACKED” TO THE
START OF THE CURRENTLY EXECUTING FILE. THE BOUNDARY IS THUS WIDE OPEN FOR ATTACKERS TO INVOKE MORE
MALICIOUS ATTACK THAN THIS.
EXECUTION OF BINARY FILES [21]
IT HAS BEEN NOTED THAT IT IS POSSIBLE TO CREATE ARBITRARY FILES ON THE TARGET SERVER, INCLUDING
BINARY EXECUTABLE FILES:
REQUIRE('FS').WRITEFILESYNC(FILENAME,DATA,'BASE64');
IN THE PRECEDING COMMAND, FILENAME IS THE NAME OF THE RESULTING FILE (I.E. FOO.EXE)
AND DATA IS THE BASE-64 ENCODED CONTENTS THAT WILL BE WRITTEN TO THE NEW FILE. THE ATTACKER NOW
ONLY NEEDS A WAY TO EXECUTE THIS BINARY ON THE SERVER.
NOW THAT THE ATTACKER HAS WRITTEN THEIR ATTACK BINARY TO THE SERVER, THEY NEED TO EXECUTE IT BY
ISSUING THIS COMMAND:
REQUIRE('CHILD_PROCESS').SPAWN(FILENAME);
41
CHAPTER 6: BENCHMARKING NODE.JS
IN SEVERAL SECTION OF THIS PAPER, WE DISCUSSED THE PROS AND CONS OF SINGLE-THREADED NODE BY
COMPARING IT WITH A CONVENTIONAL THREADED PROGRAMMING MODEL. THIS HAS BEEN LIMITED TO THEORY
SO FAR. SO, IN THIS SECTION WE VERIFY THOSE STATEMENTS WITH TESTING. TESTS WERE PERFORMED USING
PROGRAMS IN NODE AND PHP. THOSE PROGRAMS WERE EXECUTED IN TWO DIFFERENT SERVERS WHICH WERE
CONFIGURED PRIOR TO TESTS. THE DETAILED BENCHMARKING METHODOLOGY AND THE RESULTS ARE DISCUSSED
SEPARATELY BELOW.
BENCHMARKING METHODOLOGY
BENCHMARKING TESTS WERE PERFORMED WITH THE OBJECTIVE TO TEST NODE AND APACHE SERVERS
RUNNING PHP WITH INCREASING LEVELS OF CONCURRENCY AND REQUESTS. THESE TESTS WERE INTENDED TO
MEASURE HOW WELL EACH FRAMEWORK HANDLED VARYING SERVER LOADS. THEREFORE, THE PURPOSE OF THE
TEST WAS TO COMPARE NODE WITH ONE OF ITS COMPETITOR APACHE-PHP COMBINATIONS. THROUGHOUT THIS
PAPER, WE ASSERTED THAT NODE IS ABLE TO ATTAIN HIGHER LEVELS OF CONCURRENCY AND IS EFFICIENT AT
HANDLING I/O WHILE FAILING TO REPEAT THAT TRAIT WHEN HEAVY COMPUTATION IS INVOLVED. OUR
EXPERIMENTS DESCRIBED IN THIS SECTION VALIDATE THOSE STATEMENTS WITH TEST RESULTS AND ANALYSIS. FOR
PERFORMING OUR TESTS, TWO TEST ENVIRONMENTS WERE SET UP INSIDE A VIRTUAL MACHINE, ONE RUNNING ON
WINDOWS 7 AND THE OTHER ON UBUNTU. THE DETAILED SERVER CONFIGURATION FOR OUR TESTING
ENVIRONMENT IS SHOWN IN TABLE 1.
42
TABLE 1
TEST ENVIRONMENT SERVER CONFIGURATION
WINDOWS 7 ENVIRONMENT
HARDWARE CONFIGURATION SOFTWARE CONFIGURATION
OS: WINDOWS 7 ENTERPRISE SERVICE PACK 1,
64 BIT
CPU: INTEL (R) XEON (R) CPU E5-2680 V2
@ 2.80 GHZ 2.79 GHZ
RAM: 4 GB
NODE: 0.12.7
PHP: 5.5.30
APACHE: 2.4.17
APACHE BENCH: 2.3
UBUNTU ENVIRONMENT
HARDWARE CONFIGURATION SOFTWARE CONFIGURATION
OS: UBUNTU 14.04.2 LTS
CPU: INTEL (R) XEON (R) CPU E5-2680 V2
@ 2.80 GHZ 2.80 GHZ
RAM: 2 GB
LINUX KERNEL: LINUX 3.13.0-65-GENERIC
X86_64
NODE: 0.12.7
PHP: 5.5.9
APACHE: 2.4.7
APACHE BENCH: 2.3
43
FOR GATHERING THE HARDWARE CONFIGURATION INFO IN UBUNTU, THE FOLLOWING COMMANDS WERE USED:
$ CAT /PROC/MEMINFO
$ CAT /PROC/CPUINFO
$ LSB_RELEASE –A
$ UNAME -MRS
OUR EXPERIMENTS WERE CONDUCTED BY RUNNING THE NODE AND APACHE WEB SERVER LOCALLY,
HOSTING 2 SAMPLE PROGRAMS. FOR INSTALLING APACHE-PHP IN THE WINDOWS ENVIRONMENT, THE THIRDPARTY TOOL NAMED XAMP WAS USED. FOR EMULATING THE CONCURRENT CONNECTIONS AND MULTIPLE
REQUESTS, A TOOL NAMED APACHE BENCH WAS USED (A COMMAND LINE UTILITY THAT COMES WITH DEFAULT
INSTALLATION OF APACHE SERVER IN XAMP). APACHE BENCH OFFERS AN ARRAY OF CONFIGURATIONS. FOR
THESE EXPERIMENTS, THE TOTAL NUMBER OF SERVER REQUESTS AND NUMBER OF CONCURRENT REQUESTS WERE
VARIED. BELOW IS A SAMPLE COMMAND FOR BENCHMARKING A SERVER RUNNING LOCALLY ON PORT 8080 WITH
10,000 TOTAL REQUESTS AND 1,000 CONCURRENT REQUESTS [28].
AB -N 10000 -C 1000 HTTP://LOCALHOST:8080/
FOR INSTALLING APACHE-PHP IN UBUNTU FOLLOWING COMMANDS WERE USED:
SUDO APT-GET INSTALL APACHE2
SUDO APT-GET INSTALL PHP5
SUDO APT-GET INSTALL LIBAPACHE2-MOD-PHP5
SUDO /ETC/INIT.D/APACHE2 RESTART
FOR INSTALLING APACHE BENCH IN UBUNTU FOLLOWING COMMAND WAS ISSUED:
SUDO APT-GET INSTALL APACHE2-UTILS
44
TEST 1: FIBONACCI NUMBER CALCULATION [29]
THE CALCULATION OF FIBONACCI NUMBERS IS A COMMON PROGRAMMING PROBLEM IN TEACHING
COMPUTER SCIENCE AND MATHEMATICS. FORMALLY, THE FIBONACCI NUMBER FN IS THE NTH TERM OF THE
SERIES FORMED BY THE FOLLOWING RECURRENCE RELATION:
𝐹𝑛 = 𝐹𝑛 − 1 + 𝐹𝑛 − 2
FOR 𝑛 = 3, 4, . . . , WITH 𝐹1 = 𝐹2 = 1
THERE ARE MANY ITERATIVE RECURSIVE SOLUTIONS FOR CALCULATING FIBONACCI NUMBERS. AMONG
THEM THE POPULAR ONE IS RECURSIVE VERSION, THE PSEUDO CODE OF WHICH IS SHOWN IN FIGURE 27.
FIGURE 27
RECURSIVE FUNCTION TO CALCULATE FIBONACCI NUMBER
THE RECURSIVE FIBONACCI FUNCTION’S MAIN DISADVANTAGE, HOWEVER, IS ITS EXPONENTIAL TIME
COMPLEXITY (BECAUSE OF GROWING NUMBER OF INTERMEDIATE VALUES) COMPARED TO THE LINEAR TIME
COMPLEXITY OF THE ITERATIVE VERSIONS. THE FIBONACCI CALCULATION WAS CHOSEN BECAUSE IT INVOLVES
HEAVY COMPUTATION AND THE OBJECTIVE WAS TO TEST HOW NODE PERFORMS DOING HEAVY COMPUTATION AS
COMPARED TO APACHE-PHP. BOTH THE NODE PROGRAM AND THE PHP PROGRAM WERE CODED TO CALCULATE
THE 20
TH FIBONACCI NUMBER.
45
TEST 2: READING LARGE TEXT FILE WITH CONCURRENT REQUESTS
FILE READING IS AN I/O OPERATION. WE DISCUSSED THAT NODE IS PROFICIENT AT HANDLING I/O
REQUESTS. IN ORDER TO TEST THIS, WE CODED IN BOTH NODE AND PHP TO READ A LARGE TEXT FILE HAVING TWO
COLUMN DATA DELIMITED BY A TAB AND WITH 500,000 LINES. AN EXCERPT OF THE TEXT FILE IS SHOWN
BELOW:
//DFILE.DAT
23279854 9
23215908 8
24666448 11
FOR MONITORING, THE CPU AND THE MEMORY USAGE IN THE WINDOWS ENVIRONMENT DURING
EXECUTION OF 2 SAMPLE PROGRAMS, WINDOWS TASK MANAGER WAS USED. LIKEWISE FOR UBUNTU, THE
COMMAND LINE TOOLS NAMED HTOP AND MPSTAT WERE USED. HTOP AND MPSTAT WERE INSTALLED IN UBUNTU
BY ISSUING THE FOLLOWING COMMANDS:
SUDO APT-GET INSTALL HTOP
SUDO APT-GET INSTALL SYSSTAT
BENCHMARKING RESULTS AND FINDINGS
NODE WAS QUITE FAST IN TERMS OF EXECUTION TIME FOR TEST 1 IN THE WINDOWS ENVIRONMENT AS
VERIFIED BY THE COMPARISON BETWEEN THE RESPONSE TIME READINGS IN TABLE 3 AND TABLE 2. EVEN
WITH A SIGNIFICANT INCREASE IN CONCURRENT REQUESTS AND NUMBER OF REQUESTS, THE RESPONSE TIME WAS
NOT AS HIGH FOR NODE AS IT WAS FOR APACHE-PHP. HOWEVER, NODE ACCOMPLISHED THIS TASK WITH A
PEAK CPU UTILIZATION TIME OF 100% (IN A SINGLE THREAD) AS COMPARED TO MAX 76% FOR APACHE-
46
PHP. THIS HAS BEEN SHOWN IN FIGURE 29 AND FIGURES 28 FOR APACHE-PHP AND NODE IN WINDOWS
RESPECTIVELY.
TABLE 2
TEST 1: WINDOWS 7 ENVIRONMENT (APACHE-PHP)
EXECUTION TIME IN SECONDS
CONCURRENCY\REQUESTS 500 1,000 5,000 10,000
10 1.805 3.463 17.753 36.582
100 2.075 4.303 21.295 46.351
200 1.919 3.760 24.632 47.252
FIGURE 28
TEST 1: CPU UTILIZATION WINDOWS7 ENVIRONMENT (APACHE-PHP)
47
TABLE 3
TEST 1: WINDOWS 7 ENVIRONMENT (NODE.JS)
EXECUTION TIME IN SECONDS
CONCURRENCY\REQUESTS 500 1,000 5,000 10,000
10 0.577 0.796 4.524 7.472
100 0.532 0.739 3.432 7.363
200 0.421 0.827 3.276 6.536
FIGURE 29
TEST 1: CPU UTILIZATION WINDOWS7 ENVIRONMENT (NODE.JS)
48
TABLE 4
TEST 1: UBUNTU ENVIRONMENT (APACHE-PHP)
EXECUTION TIME IN SECONDS/CPU UTILIZATION IN %
CONCURRENCY/REQUESTS 500 1,000 5,000 10,000
10 0.876
/
9.2%
1.777
/
21.2%
8.783
/
19.7%
17.459
/
17.9%
100 0.886
/
12.4%
1.740
/
19.7%
9.018
/
19.1%
18.041
/
5.2%
200 0.932
/
6.6%
1.762
/
17.1%
9.138
/
20.5%
17.946
/
37.9%
FIGURE 30
TEST 1: CPU UTILIZATION UBUNTU ENVIRONMENT (APACHE-PHP)
SURPRISINGLY, THE EXECUTION TIME OF THE 20TH FIBONACCI NUMBER IN APACHE-PHP WAS QUITE
LOW IN THE UBUNTU ENVIRONMENT BUT SO WAS THE CASE FOR NODE. THE MEASUREMENTS OF RESPONSE
49
TIME ALONG WITH CPU UTILIZATION TIME OF APACHE-PHP AND NODE IN UBUNTU IS LISTED IN TABLE 4
AND TABLE 5. THE CPU ACTIVITY WAS LOGGED USING THE HTOP COMMAND AS SHOWN IN FIGURE 30 AND
FIGURE 31. THE PEAK CPU UTILIZATION RATIO USING APACHE-PHP WAS 37.9% WHEREAS NODE HAD
97.6% (IN A SINGLE THREAD). THE COMPARATIVE GRAPH IN FIGURE 33 SHOWS THAT NODE FALLS SHORT IN
TERMS OF CPU UTILIZATION RATIO BUT ITS RESPONSE TIME PERFORMANCE IS REMARKABLY GOOD FOR BOTH THE
WINDOWS AND UBUNTU ENVIRONMENTS AS SHOWN IN FIGURE 32. HENCE, WHEN HEAVY COMPUTATION IS
INVOLVED NODE IS PROBABLY NOT THE GOOD CHOICE FOR APPLICATION DEVELOPMENT AS IT CONSUMES WAY
TOO MUCH OF CPU TIME IN CONTRAST TO A CONVENTIONAL MODEL.
TABLE 5
TEST 1: UBUNTU ENVIRONMENT (NODE.JS)
EXECUTION TIME IN SECONDS/CPU UTILIZATION IN %
(SINGLE THREAD)
CONCURRENCY/REQUESTS 500 1,000 5,000 10,000
10 0.271
/
21.2%
0.457
/
25.3%
2.420
/
74.8%
3.934
/
98.6%
100 0.229
/
19.5%
0.443
/
24.5%
2.018
/
95.7%
3.787
/
98.0%
200 0.351
/
14.0%
0.509
/
21.3%
2.121
/
94.4%
4.337
/
99.7%
50
FIGURE 31
TEST 1: CPU UTILIZATION UBUNTU ENVIRONMENT (NODE.JS)
FIGURE 32
TEST 1: RESPONSE TIME GRAPH WITH HTTP REQUESTS & 200 CONCURRENT
51
FIGURE 33
TEST 1: CPU UTILIZATION RATIO WITH HTTP REQUESTS & 200 CONCURRENT (SINGLE THREAD)
TEST 2 IS THE TEST FOR I/O OPERATIONS AND AS DISCUSSED, NODE WAS EXPECTED TO PERFORM VERY
WELL IN THIS EXPERIMENT AND THE RESULTS WERE AS GOOD AS EXPECTED. THE MEASUREMENTS OF RESPONSE
TIME FOR APACHE-PHP AND NODE IN THE WINDOWS ENVIRONMENT ARE SHOWN IN TABLE 6 AND TABLE 7.
FROM THESE TWO TABLES WE OBSERVE THAT NODE WAS ALMOST TWICE AS FAST FOR SEVERAL SETS OF METRICS
IN THE WINDOWS ENVIRONMENT. WE OBSERVE THAT IF SETS OF 100, 1000 AND 200, 1000 COMBINATIONS
OF CONCURRENCY, AND REQUESTS ARE COMPARED THEN NODE IS TWICE AS MUCH AS FAST AS APACHE-PHP.
52
TABLE 6
TEST 2: WINDOWS 7 ENVIRONMENT (APACHE-PHP)
EXECUTION TIME IN SECONDS
CONCURRENCY\REQUESTS 500 1,000 5,000 10,000
10 18.542 43.646 163.940 342.763
100 24.726 49.577 241.738 485.893
200 21.824 44.382 208.962 422.542
TABLE 7
TEST 2: WINDOWS 7 ENVIRONMENT (NODE.JS)
EXECUTION TIME IN SECONDS
CONCURRENCY\REQUESTS 500 1,000 5,000 10,000
10 12.043 31.903 119.573 306.478
100 12.745 25.771 112.694 264.592
200 11.918 21.403 130.790 245.263
53
TABLE 8
TEST 2: UBUNTU ENVIRONMENT (APACHE-PHP)
EXECUTION TIME IN SECONDS
CONCURRENCY\REQUESTS 500 1,000 5,000 10,000
10 1.999 3.838 19.796 38.426
100 2.003 4.169 22.190 39.922
200 1.990 6.823 21.134 42.091
TABLE 9
TEST 2: UBUNTU ENVIRONMENT (NODE.JS)
EXECUTION TIME IN SECONDS
CONCURRENCY\REQUESTS 500 1,000 5,000 10,000
10 1.379 2.601 13.066 20.235
100 1.531 3.201 12.988 22.346
200 1.533 3.065 14.253 29.648
THE MEASUREMENTS OF RESPONSE TIME FOR BOTH THE NODE AND APACHE-PHP FOR TEST 2 IN THE
UBUNTU ENVIRONMENT IS SHOWN IN TABLE 8 AND TABLE 9. THE RESULTS ARE QUITE SIMILAR TO WHAT IT WAS
IN THE WINDOWS ENVIRONMENT. FOR SEVERAL INSTANCES SUCH AS FOR 100, 10000 AND 100, 5000
54
COMBINATION OF CONCURRENCY AND REQUESTS, NODE IS ESSENTIALLY TWO TIMES FASTER THAN APACHE-PHP.
THE COMPARATIVE GRAPH FOR BOTH ENVIRONMENTS FOR BOTH NODE AND APACHE-PHP IS SHOWN IN
FIGURE 34. FROM THESE RESULTS WE ASSERT THAT NODE IS A HIGH PERFORMER FOR ANY I/O OPERATIONS.
TEST 2 INVOLVED EXPERIMENTS ON THE I/O OPERATION TASK FOR READING CONTENT FROM A LARGE TEXT FILE
BUT THIS CAN BE EMULATED FOR OTHER I/O OPERATION TASKS AS WELL SUCH AS DATA FETCHING FROM A
DATABASE.
FIGURE 34
TEST 2: RESPONSE TIME GRAPH WITH HTTP REQUESTS & 200 CONCURRENT
55
CHAPTER 7: LIMITATIONS OF NODE.JS
WE ESTABLISHED NODE’S BENEFITS IN TERMS OF PERFORMANCE AND SCALABILITY. IN THIS PAPER, WE
ESTABLISHED NODE AS THE SUPERIOR AND NEAT PLATFORM FOR APPLICATION DEVELOPMENT. OUR
BENCHMARKING RESULTS IN CHAPTER 6 CLEARLY SHOWS NODE’S TRUE POTENTIAL IN HANDLING CONCURRENCY
WITH LIMITED RESOURCES. HOWEVER, SOME OF NODE’S BENEFITS HAVE BECOME THE REASONS FOR ITS
WEAKNESSES. PART OF THE UTILITY OF NODE IS THAT THERE ARE LIMITED WEAKNESSES IN THE TYPICAL SENSE
OF THE WORD [12]. HAVING BEEN DEVELOPED ONLY IN 2009, NODE IS CURRENTLY STILL IN THE DEVELOPMENT
LIFE CYCLE. PERHAPS THE LARGEST PROBLEM WITH THE PLATFORM AT ITS CURRENT STATE OF DEVELOPMENT IS THE
LESSER DEVELOPED ECOSYSTEM [12]. COMPARATIVELY, NODE IS AT INFANCY STAGE WITH SMALL
DEVELOPMENT COMMUNITY AND SUPPORT.
POOR HANDLING OF HEAVY SERVER-SIDE COMPUTATION
IN GENERAL, ANY CPU INTENSIVE OPERATION NULLIFIES ANY OF THE THROUGHPUT BENEFITS NODE
OFFERS WITH ITS EVENT-DRIVEN, NON-BLOCKING I/O MODEL BECAUSE ANY INCOMING REQUESTS WILL BE
BLOCKED, WHILE THE THREAD IS OCCUPIED SERVING REQUESTS [12]. NODE STRUGGLES IN HANDLING OF VERY
HIGH COMPUTATIONALLY INTENSIVE TASKS, BECAUSE WHENEVER IT EXECUTES LONG-RUNNING TASK, NODE WILL
QUEUE ALL REMAINING INCOMING REQUESTS, BECAUSE IT IMPLEMENTS SINGLE-THREADED ARCHITECTURE WITH
AN EVENT LOOP [36]. AS ILLUSTRATED IN TEST1 OF OUR BENCHMARKING TESTS, NODE UTILIZED ALMOST 100%
OF CPU (IN A SINGLE THREAD) FOR CALCULATING THE 20TH FIBONACCI NUMBER. PRACTICALLY, THE LOAD RATIO
SCALES UP HIGHER THAN THAT, AND UNDOUBTEDLY NODE WILL NOT BE ABLE TO COPE WITH IT. FOR NODE TO BE
AN EFFECTIVE PROGRAMMING LANGUAGE, IT SHOULD BE ABLE TO HANDLE ANY SORT OF APPLICATIONS INCLUDING
HEAVY COMPUTATION TASKS. NODE IS SINGLE-THREADED AND USES ONLY A SINGLE CPU CORE WHICH LIMITS
56
THAT POSSIBILITY. THIS CAN PROBABLY BE RESOLVED BY ADDING CONCURRENCY ON A MULTICORE SERVER, IN
THE FORM OF A CLUSTER MODULE. A CLUSTER MODULE CREATES CHILD PROCESSES (WORKERS) WHICH SHARE ALL
THE SERVER PORTS WITH THE MAIN NODE PROCESS (MASTER). THUS, THE ELEGANT SOLUTION FOR NODE TO
DEAL WITH HEAVY COMPUTATION AND FOR SCALING UP THE APPLICATIONS WOULD BE TO SPLIT A SINGLE
PROCESS INTO MULTIPLE PROCESSES OR WORKERS [33].
SERVER-SIDE APPLICATION WITH RELATIONAL DATABASE
NODE INTEGRATES QUITE WELL WITH NOSQL DATABASES WHICH ARE NON-RELATIONAL IN NATURE.
HOWEVER, RELATIONAL DATABASE TOOLS FOR NODE ARE STILL IN THEIR EARLY STAGES AND ARE RATHER IMMATURE
[12]. NODE IS VERY POPULAR WITH NOSQL DATABASES BUT IS SELDOM USED IN COMBINATION WITH
RELATIONAL DATABASES. THE INTEGRATION OF NODE WITH RELATIONAL DATABASES IS STILL AT AN EARLY STAGE
AND IS NOT SO SOLIDLY ESTABLISHED. WHILE NOSQL IS BECOMING MORE POPULAR, RELATIONAL DATABASES
ARE NOT GOING TO BE PHASED OUT ANYTIME SOON. CONSIDERING THAT, IT BECOMES NECESSARY FOR NODE TO
BECOME WELL-INTEGRATED WITH THE RELATIONAL DATABASES.
COMPLEXITY WITH CALLBACK FUNCTION
ASYNCHRONOUS I/O COMBINED WITH A CALLBACK FUNCTION IS THE SALIENT FEATURE OF NODE THAT
ALLOWS IT TO HANDLE MULTIPLE CONCURRENCIES. A CALLBACK FUNCTION IN NODE IS AN ANONYMOUS
FUNCTION THAT IS USUALLY NESTED TOGETHER WITH SOME OTHER FACTORY METHODS. WHEN THE LOGIC OF THE
CODE BECOMES COMPLEX, NODE MIGHT SUFFER FROM THE PROBLEM TERMED CALLBACK HELL [34]. CALLBACK
HELL IS THE OCCURRENCE OF AN UGLY NESTING OF MULTIPLE ASYNCHRONOUS JAVASCRIPT FUNCTIONS THAT GO TO
MULTIPLE LEVEL OF NESTING IN DEPTH. THE EXTENSIVE USE OF ASYNCHRONOUS THREADING CAN MAKE
COMPLICATED LOGIC VERY DIFFICULT TO WRITE. ANYTHING REQUIRING INTERACTION BETWEEN MORE THAN THREE
57
EXTERNAL APIS ENDS UP CAUSING CODE TO NEST MANY LEVELS DEEP; ALSO MAKING THE CODE VERY DIFFICULT
TO READ AND DOCUMENT [35].
ECOSYSTEM IN DEVELOPMENT
NODE’S ECOSYSTEM IS CURRENTLY IN ITS DEVELOPMENT STAGE. ALTHOUGH, THE NUMBER OF PUBLIC
LIBRARIES OR MODULES IN NODE ONLINE REPOSITORY (SEE CHAPTER 1) IS INCREASING, AND THE COMMUNITY
AND SUPPORT IS EXPANDING, THERE IS STILL A LONG WAY TO GO, BEFORE ITS ECOSYSTEM IS SUFFICIENTLY
ESTABLISHED. MOST OF THE APIS PROVIDED BY NODE MAY NOT BE STABLE AND THEY CANNOT BE ASSUMED
TO BE READY IN PRODUCTION. HOWEVER, THE NODE ECOSYSTEM IS EXPECTED TO EXPAND AND BECOME
SOLID.
ADHERENCE TO JAVASCRIPT
JAVASCRIPT IS THE CORE OF NODE. NODE IS A JAVASCRIPT LANGUAGE WITH ADDITIONAL
FUNCTIONALITIES AND FEATURES WITH BOTH THE CLIENT-SIDE AND THE SERVER-SIDE SCRIPTING CAPABILITY. IT IS
DISCUSSED IN PREVIOUS SECTION (SEE CHAPTER 4) HOW NODE IS BENEFITED WITH ITS BASE ON JAVASCRIPT
AND HOW NODE SUFFERS IN TERMS OF THE SECURITY ASPECTS (SEE CHAPTER 5) THAT IT INHERITED FROM
JAVASCRIPT. ADDITIONALLY, JAVASCRIPT HAS NOT BEEN DEVELOPED FOR USE ON SERVERS UNTIL RECENTLY.
JAVASCRIPT IS STILL VERY NEW IN THE SERVER-SIDE ENVIRONMENT. MANY SOLUTIONS THAT WOULD BE
OTHERWISE EASY TO CODE IN JAVA OR .NET ARE FAR MORE DIFFICULT OR EVEN IMPOSSIBLE IN NODE (OR
JAVASCRIPT IN GENERAL). ONE SPECIFIC EXAMPLE IS WITH XML SCHEMA VALIDATION AND XML
TRANSFORMATIONS. THERE ARE NOT ANY MODULES WITH MORE THAN A BASIC LEVEL OF SUPPORT FOR XML
SCHEMA VALIDATION, MISSING FUNCTIONALITY FOR NAMESPACES, AND MODULARIZED SCHEMAS. LIKEWISE,
THERE IS NOT ANY SUITABLE MODULE FOR TRANSFORMING XML [35].
58
CHAPTER 8: LIMITATIONS AND RECOMMENDATIONS FOR FURTHER STUDY
NODE IS A VERY NEW APPLICATION PLATFORM. NODE’S FEATURES AND BENEFITS HAVE ATTRACTED MANY
DEVELOPERS WORLDWIDE. AS A RESULT, THE SCOPE OF NODE HAS INCREASED SIGNIFICANTLY. DUE TO THE
WIDE SCOPE OF NODE ISSUES, WE COVERED A LIMITED NUMBER OF ASPECTS OF NODE IN THIS PAPER THAT
INCLUDES, WHAT NODE IS, HOW IT IS INSTALLED, HOW IT WORKS, WHAT A NODE MODULE AND NPM IS, HOW
NODE IS DIFFERENT FROM JAVASCRIPT AND AJAX, WHAT SECURITY HOLES IT HAS, AND WHAT ITS LIMITATIONS
ARE.
THERE ARE SOME LIMITATIONS AND SHORTCOMINGS IN OUR STUDY. FIRST OF ALL, WE DON’T PROVIDE
DETAILED INFORMATION ON POPULAR IN-BUILT NODE MODULES AVAILABLE IN NPM REPOSITORY. THERE ARE
MANY POPULAR NODE MODULES THAT ARE USED IN NODE APPLICATION DEVELOPMENT. FOR INSTANCE,
MODULAR FRAMEWORKS SUCH AS EXPRESS.JS AND JADE ARE NOT DISCUSSED IN THIS PAPER. APART FROM
THAT, APPLICATION DEVELOPMENT HAS NOT BEEN THE PRIME FOCUS. THEREFORE, NODE APPLICATION
DEVELOPMENT IS NOT DISCUSSED. NODE IS THE SIGNIFICANT PART OF THE MODERN ALL JAVASCRIPT BASED
WEB APPLICATION DEVELOPMENT FRAMEWORK TERMED THE MEAN STACK. A FURTHER INVESTIGATION OF
NODE APPLICATION DEVELOPMENT USING MEAN WOULD PROVIDE A BETTER UNDERSTANDING OF THE
APPLICATION DEVELOPMENT PROCESS IN NODE. THE DIFFERENCES AND SIMILARITIES DESCRIBED BETWEEN
JAVASCRIPT AND NODE IN THIS PAPER IS AT A VERY HIGH LEVEL. MORE EMPHASIS ON CONVENTIONAL
JAVASCRIPT CAN ILLUSTRATE THOSE DIFFERENCES MORE CLEARLY. NODE IS MORE SIMILAR TO THE JAVASCRIPT
LIBRARY TERMED JQUERY THAN TO CONVENTIONAL JAVASCRIPT. AN EMPHASIS ON THE JQUERY LIBRARY, IN
ADDITION TO CLASSICAL JAVASCRIPT, WILL HELP IN UNDERSTANDING NODE AND ITS SYNTAX. ADDITIONALLY, THE
REAL-TIME APPLICATION DEVELOPMENT MODULE OF NODE: SOCKET.IO IS ONLY EXPLAINED BY US BRIEFLY.
SOCKET.IO IS VERY POWERFUL AND CAN BE USED TO DEVELOP SEVERAL SORTS OF REAL-TIME APPLICATIONS
59
INCLUDING REAL-TIME ANALYTICS, INSTANT MESSAGING, BINARY STREAMING, AND DOCUMENT COLLABORATION.
A FURTHER STUDY OF SOCKET.IO WOULD REVEAL THE POWER OF NODE TO FACILITATE REAL-TIME APPLICATION
DEVELOPMENT THAT IS NOT POSSIBLE WITH AJAX. LASTLY, THE BENCHMARKING RESULTS IN THIS PAPER ARE
BASED ON THE COMPARISON OF NODE WITH APACHE-PHP. A FAIR BENCHMARKING TRIAL WOULD BE TO
COMPARE NODE WITH THE MEASUREMENTS MADE USING THE ASYNCHRONOUS PROGRAMMING FEATURE
AVAILABLE IN OTHER PROGRAMMING LANGUAGES SUCH AS THE SIGNALR LIBRARY AVAILABLE IN C# WHICH HAS
SIMILAR FUNCTIONALITIES TO NODE.
60
CHAPTER 9: CONCLUSION
IN THIS PAPER WE SHOWED THAT NODE HAS TRANSFORMED THE USABILITY OF JAVASCRIPT, MAKING
NODE A COMPLETE PROGRAMMING LANGUAGE. FROM BROWSERS TO SERVER-SIDE SCRIPTING OUTSIDE OF
BROWSERS, NODE HAS MADE POSSIBLE THE AVAILABILITY OF A RUNTIME ENVIRONMENT, A LIBRARY FULL OF FREE
USEFUL MODULES THAT CAN BE IMPORTED BY USING AN IN-BUILT TOOL NAMED NPM. NODE USES NONBLOCKING, EVENT-DRIVEN I/O ASYNCHRONOUS PROGRAMMING TO BE LIGHTWEIGHT AND BE EFFICIENT. WE
SHOWED THAT SETTING UP A NODE ENVIRONMENT IS SIMPLE, AND NODE IS AVAILABLE TO ALL MAJOR
OPERATING SYSTEMS.
NODE IS BASED ON THE FAMILIAR SYNTAX OF JAVASCRIPT, BUT DIFFERENCES DO EXIST. NODE CAN BE
CONFUSED WITH AJAX, BUT BOTH OF THEM ARE COMPLETELY DIFFERENT TOOLS WITH BOTH USING JAVASCRIPT
AS THE BASE. ALTHOUGH AJAX WAS INTRODUCED TO PROVIDE REAL-TIME INTERACTION IN THE WEB
APPLICATION, AJAX FAILED TO DO SO WHILE EXHIBITING A SIGNIFICANT WASTAGE OF BANDWIDTH AND
RESOURCES. NODE, VIA ITS SOCKET.IO MODULE WAS SHOWN TO OVERCOME THAT DEFICIENCY IN AJAX BY
INTRODUCING AN EFFICIENT REAL-TIME INTERACTION IN THE APPLICATION. NODE’S PERFORMANCE WITH RESPECT
TO ANOTHER SERVER-SIDE SCRIPTING LANGUAGE PHP IS QUITE REMARKABLE AS SHOWN BY OUR
BENCHMARKING TEST RESULTS. APART FROM ITS BENEFITS, NODE DOES HAVE SOME SECURITY HOLES. IF NODE
APPLICATIONS ARE NOT PROGRAMMED WITH GOOD ERROR HANDLING AND INPUT VALIDATION THEN THOSE
APPLICATIONS CAN BE VULNERABLE TO ATTACKS. THEREFORE, IT BECOMES THE RESPONSIBILITY OF NODE
DEVELOPERS TO MAKE NODE APPLICATIONS SECURE.
WITH ALL OF ITS ADVANTAGES, NODE PLAYS A CRITICAL ROLE IN THE TECHNOLOGY STACK OF MANY HIGHPROFILE COMPANIES WHO DEPEND ON ITS UNIQUE BENEFITS. NODE WAS CREATED TO SOLVE THE I/O SCALING
61
PROBLEM. SO, IF A USE CASE DOES NOT CONTAIN CPU INTENSIVE OPERATIONS NOR ACCESS ANY BLOCKING
RESOURCES, ONE CAN EXPLOIT THE BENEFITS OF NODE WHILE EXPERIENCING FAST AND SCALABLE APPLICATIONS
DEVELOPMENT WITH THE POWER OF NODE.
62
REFERENCES
[1] KURNIAWAN, A. (2014). NODE.JS SUCCINCTLY. SYNFUSION INC.
[2] GOVETT, D. (2010, MARCH). LEARNING SERVER-SIDE JAVASCRIPT WITH NODE.JS. RETRIEVED
FROM ENVATO TUTS+: HTTP://WWW.WEBCITATION.ORG/6EPONKZWD
[3] TEIXEIRA, P. (2013). HANDS-ON NODE.JS. IN P. TEIXEIRA, HANDS-ON NODE.JS. LEAN
PUBLISHING.
[4] YOUNG, A. (2012, MAY). WINDOWS AND NODE: GETTING STARTED. RETRIEVED FROM DAILYJS:
HTTP://WWW.WEBCITATION.ORG/6EPOZY7JZ
[5] TOM HUGHES-CROUCHER, M. W. (2012). NODE: UP AND RUNNING. IN M. W. TOM
HUGHES-CROUCHER, NODE: UP AND RUNNING. O'REILLY MEDIA INC.
[6] ORTIZ, A. (2013, MARCH). SERVER-SIDE WEB DEVELOPMENT WITH JAVASCRIPT AND NODE.JS.
RETRIEVED FROM HTTP://WEBCEM01.CEM.ITESM.MX:8005/NODE/NODE.HTML
[7] MIKE CANTELON, T. H. (2013). NODE.JS IN ACTION. MANNING PUBLICATIONS.
[8] RAUCH, G. (2012). SMASHING NODE.JS JAVASCRIPT EVERYWHERE. JOHN WILEY & SONS
INC.
[9] TEIXEIRA, P. (2013). PROFESSIONAL NODEJS: BUILDING JAVASCRIPT-BASED SCALABLE
SOFTWARE. JOHN WILEY & SONS INC.
[10] WANDSCHNEIDER, M. (2013). LEARNING NODE.JS A HANDS-ON GUIDE TO BUILIDING WEB
APPLICATIONS IN JAVASCRIPT. PEARSON EDUCATION.
[11] CAPAN, T. (N.D.). TOPLAL. RETRIEVED FROM WHY THE HELL WOULD I USE NODE.JS? A
CASE-BY-CASE INTRODUCTION: HTTP://WWW.WEBCITATION.ORG/6EPPS09LG
[12] JOSEPH DELANEY, C. G. (N.D.). NODE.JS AT A GLANCE. WHALE PATH INC.
[13] COIS, C. A. (2013, JUNE). WHY YOU SHOULD LEARN NODE.JS TODAY. RETRIEVED FROM
UDEMY BLOG: HTTP://WWW.WEBCITATION.ORG/6EPPD1IB8
[14] WILSON, J. R. (2013). NODE.JS THE RIGHT WAY PRACTICAL, SERVER-SIDE JAVASCRIPT THAT
SALES. THE PRAGMATIC PROGRAMMERS LLC.
[15] NODE.JS. (N.D.). RETRIEVED FROM NODE.JS: HTTP://WWW.WEBCITATION.ORG/6ERYP2N8A
[16] AJAX BASICS. (2015, AUGUST). RETRIEVED FROM WEBUCATOR:
HTTP://WWW.WEBCITATION.ORG/6EPPMPP3W
63
[17] GODDE, A. (2015, JANUARY). WHY AJAX ISN'T ENOUGH. RETRIEVED FROM SMASHING
MAGAZINE: HTTP://WWW.WEBCITATION.ORG/6EPPTXANV
[18] HOLZNER, S. (2009). AJAX A BEGINNER'S GUIDE. MCGRAW-HILL COMPANIES.
[19] ANDERSON/DIFFERENTIAL.IO, D. (2014). HOW NODE.JS CAN ACCELERATE ENTERPRISE
APPLICATION DEVELOPMENT. MODULUS.
[20] ENDLER, D. (2002). THE EVOLUTION OF CROSS-SITE SCRIPTING ATTACKS. IDEFENSE INC.
[21] SULLIVAN, B. (2011). SERVER-SIDE JAVASCRIPT INJECTION. ADOBE SECURE SOFTWARE
ENGINEERING TEAM.
[22] BARNES, D. (2013). NODE.JS SECURITY. PACKT PUBLISHING.
[23] SUBRAMANI RAO, S. R. (2011). DENIAL OF SERVICE ATTACKS AND MITIGATION TECHNIQUES:
REAL TIME IMPLEMENTATION WITH DETAILED ANALYSIS. THE SANS INSTITUTE.
[24] BALDWIN, A. (2014, NOVEMBER). REGULAR EXPRESSION DOS AND NODE.JS. RETRIEVED FROM
LIFT SECURITY: HTTPS://BLOG.LIFTSECURITY.IO/2014/11/03/REGULAR-EXPRESSION-DOS-ANDNODE.JS?UTM_SOURCE=NODEWEEKLY&UTM_MEDIUM=EMAIL
[25] REGULAR EXPRESSION DENIAL OF SERVICE - REDOS. (2015, NOVEMBER). RETRIEVED FROM
OWASP: HTTP://WWW.WEBCITATION.ORG/6EPQK8GBL
[26] OWASP VALIDATION REGEX REPOSITORY. (2014, JULY). RETRIEVED FROM OWASP
VALIDATION PROJECT: HTTP://WWW.WEBCITATION.ORG/6EPQRIV4I
[27] NODE.JS V5.1.0 DOCUMENTATION. (N.D.). RETRIEVED FROM NODE.JS:
HTTP://WWW.WEBCITATION.ORG/6EPQYDTWX
[28] MCCUNE, R. R. (2011). NODE.JS PARADIGMS AND BENCHMARKS. UNIVERSITY OF NOTRE
DAME.
[29] RUBIO, M. (N.D.). FIBONACCI NUMBERS USING MUTUAL RECURSION. REY JUAN CARLOS
UNIVERSITY, DEPARTMENT OF COMPUTER SCIENCE.
[30] MARTONCA, E. (2015, JUNE). WHY ALL THE HYPE ABOUT NODE.JS? RETRIEVED FROM
HTTP://WWW.WEBCITATION.ORG/6EPRX7R2R
[31] USING A PACKAGE.JSON. (N.D.). RETRIEVED FROM NPM:
HTTP://WWW.WEBCITATION.ORG/6EAIDAR9F
[32] PASQUALI, S. (2013). MASTERING NODE.JS. PACKT PUBLISHING.
[33] KAMALI, B. (2015, JULY). HOW TO CREATE A NODE.JS CLUSTER FOR SPEEDING UP YOUR
APPS. RETRIEVED FROM SITEPOINT: HTTP://WWW.WEBCITATION.ORG/6EW832ZZA
[34] CALLBACK HELL (N.D.). RETRIEVED FROM CALLBACK HELL:
HTTP://WWW.WEBCITATION.ORG/6EW8DXVK0
64
[35] MCILVENNA, S. (JANUARY, 2014). RETRIEVED FROM EVOLVING SOFTWARE:
HTTP://WWW.WEBCITATION.ORG/6EW8PX8DH
[36] POSA, R. (MARCH, 2015). RETRIEVED FROM JOURNALDEV:
HTTP://WWW.WEBCITATION.ORG/6EW9SMBVA
[37] FLANAGAN, D. (2006). JAVASCRIPT THE DEFINITIVE GUIDE. O'REILLY MEDIA INC.
65
APPENDIX
NODE.JS INSTALLATION
NODE’S INSTALLATION IS FAIRLY SIMPLE. IT CAN BE DOWNLOADED AND INSTALLED EASILY AND THEN GET
IT UP-AND-RUNNING IN A MATTER OF MINUTES. NODE CAN BE INSTALLED OUT OF THE BOX ON WINDOWS,
LINUX, MACINTOSH, AND SOLARIS. DEPENDING UPON THE PLATFORM, A PACKAGE INSTALLER CAN BE
DOWNLOADED FOR WINDOWS OR MAC OS THAT CAN BE EXECUTED TO INSTALL NODE. FOR LINUX
DISTRIBUTION, THE LATEST STABLE SOURCE CODE CAN BE DOWNLOADED AND BUILT [3].
INSTALLATION ON WINDOWS
INSTALLING NODE IN THE WINDOWS ENVIRONMENT IS AS EASY AS INSTALLING ANY OTHER WINDOWS
APPLICATION. IN ORDER TO BEGIN THE INSTALLATION, DOWNLOAD THE WINDOWS INSTALLER (MSI) FILE FROM
THE OFFICIAL WEBSITE OF NODE. CLICK ON THE DOWNLOAD FILE TO INITIATE THE WINDOWS INSTALLER WITH A
WIZARD WHICH IS PRETTY EASY TO FOLLOW. IT’S JUST LIKE INSTALLING ANY OTHER WINDOWS PROGRAM - THE
NODE BINARIES WILL END UP IN C:\PROGRAM FILES (X86)\NODEJS\ (IN 32 BIT WINDOWS)
AND WILL BE ACCESSIBLE FROM CMD.EXE [4].
ALTERNATIVELY, NODE CAN BE INSTALLED USING PACKAGE INSTEAD OF INSTALLER. FOR THAT, A
COMMAND LINE INSTALLER FOR WINDOWS SUCH AS THE SCOOP OR THE CHOCOLATEY SHOULD BE INSTALLED. IN
ORDER TO INSTALL SCOOP, POWERSHELL 3 SHOULD BE INSTALLED IN THE MACHINE AND ENSURE TO CHANGE THE
EXECUTION POLICY (I.E. ENABLE POWERSHELL) WITH SET-EXECUTIONPOLICY
UNRESTRICTED -S CU. THEN FROM THE COMMAND LINE, NODE CAN BE INSTALLED DIRECTLY USING
THIS COMMAND:
66
SCOOP INSTALL NODEJS
AFTER THE INSTALLATION, NODE EXECUTABLE CAN BE RUN FROM THE COMMAND LINE TO CHECK IF IT IS
INSTALLED SUCCESSFULLY BY TYPING NODE –V. THE COMMAND SHOULD SHOW THE VERSION OF THE NODE,
IF THE INSTALLATION IS SUCCESSFUL [5].
A NODE SHELL OR REPL (READ-EVAL-PRINT LOOP) CAN BE RUN TO INTERACTIVELY TEST THE JAVASCRIPT
CODE. NODE REPL IS AN INTERACTIVE NODE PROGRAMMING ENVIRONMENT GREAT FOR TESTING OUT AND
LEARNING ABOUT IT [5]. AT THE TERMINAL WINDOW TYPE: NODE AND THAT WILL ALLOW ENTERING ANY
JAVASCRIPT EXPRESSION AFTER THE SHELL PROMPT “>”.TYPE .EXIT FOLLOWED BY ENTER TO QUIT THE
SHELL OR PRESS CTRL-C TWICE [6]. FOR THE PRODUCTION DEVELOPMENT, ANY TEXT EDITOR CAN BE CHOSEN TO
WRITE A NODE PROGRAM, SAVE IT WITH A .JS EXTENSION ANYWHERE IN THE MACHINE. THEN, IN ORDER TO
EXECUTE THE PROGRAM FROM THE COMMAND LINE TYPE [5]:
NODE PROGRAM_NAME.JS
INSTALLATION ON UBUNTU
INSTALLATION OF NODE IN LINUX IS FAIRLY SIMPLE. IN THIS PAPER, WE USED THE UBUNTU FOR LINUX.
THEREFORE, THIS PART DISCUSSES THE STEPS INVOLVED IN SETTING UP THE NODE IN THE UBUNTU THAT
REQUIRES FOLLOWING 2 PRIMARY TASKS. AT FIRST IS THE INSTALLATION OF PRE-REQUISITE PACKAGES AND THEN
THE COMPILATION OF NODE [7].
THERE ARE SOME PRE-REQUISITE PACKAGES THAT NEED TO BE INSTALLED IN THE UBUNTU BEFORE
INSTALLING NODE. THIS CAN BE DONE BY EXECUTING THE SINGLE LINE COMMAND GIVEN BELOW:
SUDO APT-GET INSTALL BUILD-ESSENTIAL LIBSSL-DEV
67
AFTER COMPILING THE NODE, SOME MORE STEPS ARE REQUIRED. FIRST, CREATE A TEMPORARY FOLDER BY
ENTERING THE FOLLOWING COMMAND FROM THE COMMAND LINE:
MKDIR TMP
THEN, NAVIGATE INTO THE DIRECTORY AND ENTER THE FOLLOWING COMMANDS TO GET THE TAR OF NODE
SETUP FILES:
CD TMP
CURL –O HTTP://NODEJS.ORG/DIST/NODE-LATEST.TAR.GZ
ONCE THE DOWNLOAD IS COMPLETE, ENTER THE FOLLOWING COMMAND TO EXTRACT THE TAR:
TAR ZXVF NODE-LATEST.TAR.GZ
NEXT, ENTER THE FOLLOWING COMMAND IN SEQUENCE TO MOVE INSIDE THE EXTRACTED DIRECTORY, TO
RUN A CONFIGURATION SCRIPT AND FINALLY TO COMPILE NODE RESPECTIVELY:
CD NODE-V*
./CONFIGURE
MAKE
ONCE THE TEXT STOPS SCROLLING, AND AFTER THE COMMAND PROMPT COMES IN, ENTER THE FINAL
COMMAND IN THE INSTALLATION PROCESS:
SUDO MAKE INSTALL
68
THIS WILL INSTALL NODE IN THE UBUNTU. THE SUCCESSFUL INSTALLATION OF THE NODE CAN BE VERIFIED
BY ISSUING THE FOLLOWING COMMAND TO SHOW THE VERSION OF NODE IN THE TERMINAL LIKE IT WAS SHOWN
IN THE WINDOWS INSTALLATION:
NODE –V
SOURCE CODE
THE FOLLOWING SCRIPT WAS USED FOR CALCULATING THE 20TH FIBONACCI NUMBER USING APACHE-PHP.
<?PHP
INI_SET("PRECISION",50);
$FIBNUM = 20;
FUNCTION FIBONACCI($NUMBER) {
 IF ($NUMBER < 2) {
 RETURN 1;
 } ELSE {
 RETURN (FIBONACCI($NUMBER-2) + FIBONACCI($NUMBER-1));
 }
}
ECHO $FIBNUM.'TH FIBONACCI NUMBER IS: ';
ECHO FIBONACCI($FIBNUM);
?>
THE FOLLOWING SCRIPT WAS USED FOR CALCULATING THE 20TH FIBONACCI NUMBER USING NODE.JS.
//FIBONACCI.JS
VAR FIBNUM = 20;
VAR RESFIBNUM;
'USE STRICT';
VAR HTTP = REQUIRE('HTTP');
VAR PORT = 8000;
HTTP.CREATESERVER(FUNCTION (REQ, RES) {
 RES.WRITEHEAD(200, {'CONTENT-TYPE': 'TEXT/PLAIN'});
 //PRINT THE RESULT OF THE FUNCTION
 RESFIBNUM = FIBONACCI(FIBNUM);
 CONSOLE.LOG(FIBNUM+'TH FIBONACCI NUMBER IS: ' + RESFIBNUM);
 RES.END(FIBNUM+'TH FIBONACCI NUMBER IS: ' + RESFIBNUM);
}).LISTEN(PORT);
CONSOLE.LOG('LISTENING AT PORT ' + PORT);
// FUNCTION FOR CALCULATING FIBONACCI NUMBER RECURSIVELY
FUNCTION FIBONACCI(N) {
 IF (N < 2)
 RETURN 1;
 ELSE
 RETURN FIBONACCI(N-2) + FIBONACCI(N-1);
}
69
THE FOLLOWING SCRIPT WAS USED FOR READING THE LARGE DATA FILE CONTENT USING APACHE-PHP.
<?PHP
$FNAME = 'DFILE.DAT';
$RESULT = FILE_GET_CONTENTS($FNAME);
ECHO $RESULT;
?>
THE FOLLOWING SCRIPT WAS USED FOR READING THE LARGE DATA FILE CONTENT USING NODE.JS
//FILEREADER.JS
VAR HTTP = REQUIRE('HTTP');
VAR SERVER = HTTP.CREATESERVER(HANDLER);
VAR FS = REQUIRE('FS');
FUNCTION HANDLER(REQUEST, RESPONSE) {
 RESPONSE.WRITEHEAD(200, {'CONTENT-TYPE': 'TEXT/PLAIN'});
 FNAME = 'DFILE.DAT'
 //READ FROM THE FILE
 FS.READFILE(FNAME, FUNCTION (ERR, DATA) {
 IF (ERR) THROW ERR;
 RESULT = DATA;
 RESPONSE.END(RESULT);
 });
}
SERVER.LISTEN(8124);
CONSOLE.LOG('SERVER RUNNING AT HTTP://127.0.0.1:8124/');